{"version":3,"sources":["theme/theme.ts","store/homeState.ts","components/atoms/typography/ShortText.tsx","components/molecules/post_card/CardMusicBox.tsx","components/molecules/post_card/CardComment.tsx","components/atoms/button/Rating.tsx","components/molecules/UserInfoBox.tsx","components/atoms/frame/CardFrame.tsx","components/atoms/button/LikeButton.tsx","components/atoms/button/ShareButton.tsx","components/atoms/button/CommentButton.tsx","components/molecules/post_card/CardReactionButtons.tsx","components/organisms/home/post/LgPostCard.tsx","client/apiClient.ts","components/organisms/LoadingPageSpinner.tsx","components/atoms/button/SmRating.tsx","components/organisms/home/post/SmPostCard.tsx","components/pages/home/Recent.tsx","hooks/api/useGetPosts.ts","components/organisms/home/Alert404.tsx","components/pages/home/detail/Detail404.tsx","components/atoms/color/gradationGreen.ts","components/organisms/MusicDetailBox.tsx","components/molecules/post_detail/ReactionButtons.tsx","components/organisms/detail/DetailBox.tsx","components/pages/home/detail/PostDetail.tsx","hooks/api/useGetDetail.ts","components/molecules/create/CreateBreadcrumb.tsx","components/atoms/button/CreateTransButton.tsx","hooks/message/useMessage.ts","components/organisms/create/CreateTrackInfo.tsx","hooks/api/useGetTrack.ts","hooks/useValidateTrackURL.ts","components/atoms/button/StarButton.tsx","components/molecules/create/FiveStarButton.tsx","components/organisms/create/CreateRate.tsx","store/meState.ts","components/organisms/create/CreateCheck.tsx","hooks/api/usePostCreate.ts","components/pages/Create.tsx","router/HomeRoutes.tsx","store/loginState.ts","components/atoms/button/HamburgerButton.tsx","components/atoms/typography/HomePostTitle.tsx","components/organisms/home/HomePostBox.tsx","components/atoms/button/MenuButton.tsx","components/atoms/button/PrimaryButton.tsx","components/molecules/MenuContents.tsx","hooks/login/useLogout.ts","components/organisms/home/MenuDrawer.tsx","components/organisms/home/MenuBar.tsx","components/templates/HomeLayout.tsx","hooks/api/useGetMe.ts","components/pages/Page404.tsx","hooks/login/useLogin.ts","components/molecules/Form.tsx","components/pages/Login.tsx","hooks/login/useRegister.ts","router/auth_route/AuthGuard.tsx","router/Router.tsx","App.tsx","index.tsx"],"names":["theme","extendTheme","styles","global","body","backgroundColor","color","components","Button","baseStyle","_focus","outline","Text","homeState","atom","key","default","topic","ShortText","props","children","fontSize","mb","fontWeight","w","overflow","textOverflow","whiteSpace","CardMusicBox","img","title","artist","flexFlow","sm","base","h","boxSize","my","mx","mt","src","shadow","CardComment","memo","py","pl","Rating","rating","isRateDisable","starSize","gap","fixedRating","toString","length","map","value","ml","pt","UserInfoBox","name","user_title","m","bg","size","mr","flexDirection","alignItems","textAlign","CardFrame","onClick","borderRadius","px","_hover","cursor","opacity","LikeButton","icon","ShareButton","CommentButton","CardReactionButtons","comment_val","like_val","LgPostCard","post","user","track","review","reaction","id","history","useHistory","display","position","push","pb","star","job","apiClient","axios","create","baseURL","withCredentials","LoadingPageSpinner","thickness","speed","emptyColor","SmRating","SmPostCard","Recent","useSetRecoilState","setTopic","sort","useState","api_posts","setApiPosts","loading","setLoading","getPosts","useCallback","get","then","res","data","catch","finally","useGetPosts","useEffect","obj","Object","assign","Alert404","status","variant","height","maxWidth","Detail404","gradationGreen","MusicDetailBox","undefined","album","release","ratio","bgGradient","frameBorder","allow","ReactionButtons","justifyContent","DetailBox","userName","userTitle","userImg","commentVal","likeVal","pr","PostDetail","failed","api_postDetail","setApiPostDetail","getPostDetail","useGetDetail","useParams","orientation","CreateBreadcrumb","step","goTrackInfo","goRate","goCheck","isTrackNull","isRatesNull","trackColor","setTrackColor","rateColor","setRateColor","checkColor","setCheckColor","trackWeight","setTrackWeight","rateWeight","setRateWeight","checkWeight","setCheckWeight","canMoveRate","canMoveCheck","spacing","separator","ChevronRight","isCurrentPage","pointerEvents","CreateTransButton","isDisabled","text","useMessage","toast","useToast","showMessage","duration","isClosable","CreateTrackInfo","onChangeTrackURL","trackUrl","trackId","setTrackId","trackData","saveTrackData","getTrack","saveTrack","useGetTrack","validateTrackURL","head","foot","url","regexHead","test","regexFoot","result","match","useValidateTrackURL","onceTrack","setOnceTrack","saveOnceTrackData","val","onChange","validatedTrackId","StarButton","num","rate","setRate","StarSize","useBreakpointValue","starGap","zIndex","style","width","FiveStarButton","toFixed","CreateRate","onChangeRate","onChangeTitle","onChangeBody","type","meState","email","CreateCheck","setTransAlert","me","useRecoilValue","postCreate","usePostCreate","Create","setStep","setTrackUrl","setTitle","setBody","setIsTrackNull","setIsRatesNull","setTrackData","transAlert","message","e","target","bool","homeRoutes","path","exact","loginState","isLogin","HamburgerButton","Hamburger","HomePostTitle","as","md","HomePostBox","onOpen","borderX","borderColor","borderBottom","goBack","align","MenuButton","disabled","colorScheme","solid","boxShadow","PrimaryButton","MenuContents","onClose","setIsLogin","logout","localStorage","removeItem","useLogout","transTo","onRecent","bgClip","MenuDrawer","isOpen","placement","MenuBar","HomeLayout","useDisclosure","getMe","setMe","useGetMe","Page404","useLogin","login","mail","password","error","Form","inputType","Login","loginMailAddress","setLoginMailAddress","loginPassword","setLoginPassword","regMailAddress","setRegMailAddress","regPassword","setRegPassword","regPasswordConfirm","setRegPasswordConfirm","regName","setRegName","register","useRegister","p","isFitted","_selected","AuthGuard","to","Router","render","route","App","className","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e8e11d4.chunk.js","sourcesContent":["import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        backgroundColor: \"gray.50\",\n        color: \"gray.800\"\n      }\n    },\n    components: {\n      Button: {\n        baseStyle: {\n          _focus: { outline: \"none\" }\n        }\n      },\n      Text: {\n        baseStyle: {\n          color:\"gray.700\"\n        }\n      }\n    }\n  }\n});\nexport default theme;\n","import { atom } from \"recoil\";\n\nexport const homeState = atom( {\n    key: \"homeState\",\n    default: { topic:\"recent\" }\n} );\n","import { ReactNode, VFC } from \"react\";\nimport { Text } from \"@chakra-ui/react\";\n\ntype Props = {\n    children: ReactNode;\n    fontSize?:\n        | string\n        | {\n              sm?: string;\n              md?: string;\n              base?: string;\n          };\n    fontWeight?: \"bold\" | \"normal\";\n    mb?: string;\n    w?: string;\n    color?: string;\n};\n\nexport const ShortText: VFC<Props> = (props) => {\n    const { children, fontSize, mb, fontWeight = \"normal\", w, color } = props;\n    return (\n        // 親要素をはみ出さない一行のテキスト\n        <Text\n            overflow=\"hidden\"\n            textOverflow=\"ellipsis\"\n            whiteSpace=\"nowrap\"\n            fontSize={fontSize}\n            fontWeight={fontWeight}\n            mb={mb}\n            w={w}\n            color={color}\n        >\n            {children}\n        </Text>\n    );\n};\n","import { Flex, Image, Box } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { ShortText } from \"../../atoms/typography/ShortText\";\n\ntype Props = {\n    img: string;\n    title: string;\n    artist: string;\n};\n\nexport const CardMusicBox: VFC<Props> = (props) => {\n    const { img, title, artist } = props;\n\n    return (\n        <Flex\n            flexFlow=\"column\"\n            w={{ sm: \"28%\", base: \"100%\" }}\n            h={{ sm: \"100%\", base: \"42%\" }}\n        >\n            <Box\n                boxSize={{ sm: \"85%\", base: \"25vh\" }}\n                my=\"auto\"\n                mx={{ sm: \"none\", base: \"auto\" }}\n                mt={{ sm: \"20%\", base: \"none\" }}\n            >\n                <Image src={img} mt=\"15%\" shadow=\"5px 5px #EEE\" />\n                <Box mt=\"5%\">\n                    <ShortText fontSize=\"lg\" fontWeight=\"bold\">\n                        {title}\n                    </ShortText>\n                    <ShortText fontSize=\"sm\">{artist}</ShortText>\n                </Box>\n            </Box>\n        </Flex>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\nimport { ShortText } from \"../../atoms/typography/ShortText\";\n\ntype Props = {\n    title: string;\n    body: string;\n};\n\nexport const CardComment: VFC<Props> = memo((props) => {\n    const { title, body } = props;\n\n    return (\n        <Box\n            h={{ sm: \"19vh\", base: \"32vh\" }}\n            w=\"100%\"\n            py=\"1%\"\n            pl=\"4%\"\n            my=\"auto\"\n            overflow=\"hidden\"\n        >\n            <ShortText\n                fontSize={{ sm: \"20px\", base: \"18px\" }}\n                fontWeight=\"bold\"\n            >\n                {title}\n            </ShortText>\n            <Text fontSize={{ sm: \"md\", base: \"15px\" }} mt=\"2%\">\n                {body}\n            </Text>\n        </Box>\n    );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { memo, VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\n\ntype Props = {\n    rating: number;\n    isRateDisable?: boolean;\n};\n\nexport const Rating: VFC<Props> = memo((props) => {\n    const { rating, isRateDisable = false } = props;\n    const starSize = \"23px\";\n    const gap = \"1px\";\n\n    let fixedRating = rating.toString();\n    if (fixedRating.length === 1) {\n        fixedRating = fixedRating + \".0\";\n    }\n\n    return (\n        <Flex>\n            {[1, 2, 3, 4, 5].map((value) =>\n                rating >= value ? (\n                    <Box mx={gap} key={value}>\n                        <BsStarFill fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : rating >= value - 0.5 ? (\n                    <Box mx={gap} key={value}>\n                        <BsStarHalf fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : (\n                    <Box mx={gap} key={value}>\n                        <BsStar fontSize={starSize} color=\"orange\" />\n                    </Box>\n                )\n            )}\n            {isRateDisable || (\n                <Text ml=\"10px\" pt=\"2px\" fontWeight=\"semibold\" color=\"gray.600\">\n                    {fixedRating}\n                </Text>\n            )}\n        </Flex>\n    );\n});\n","import { memo, VFC } from \"react\";\nimport { Flex, Avatar, Text } from \"@chakra-ui/react\";\nimport { ShortText } from \"../atoms/typography/ShortText\";\n\ntype Props = {\n    img: string | undefined;\n    name: string | undefined;\n    user_title: string | undefined;\n    pl?: string;\n    m?: string;\n};\n\nexport const UserInfoBox: VFC<Props> = memo((props) => {\n    const { img, name, user_title, pl = \"0\", m } = props;\n    return (\n        <Flex h=\"70%\" mt=\"auto\" ml=\"auto\" m={m}>\n            <Avatar\n                bg=\"gray.400\"\n                size=\"sm\"\n                mr=\"10px\"\n                my=\"auto\"\n                src={img}\n            ></Avatar>\n            <Flex\n                flexDirection=\"column\"\n                my=\"auto\"\n                w=\"100px\"\n                alignItems=\"start\"\n                overflow=\"hidden\"\n                textAlign=\"left\"\n            >\n                <ShortText fontSize=\"sm\" w=\"100px\">\n                    {name}\n                </ShortText>\n                <ShortText fontSize=\"13px\" color=\"gray\">\n                    {user_title}\n                </ShortText>\n            </Flex>\n        </Flex>\n    );\n});\n","import { Flex } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    mb: string;\n    onClick?: () => void;\n};\n\nexport const CardFrame: VFC<Props> = memo((props) => {\n    const { children, mb, onClick } = props;\n\n    return (\n        <Flex\n            w=\"98%\"\n            h={{ sm: \"33vh\", base: \"90vh\" }}\n            bg=\"white\"\n            borderRadius=\"10px\"\n            px={{ sm: \"30px\", base: \"25px\" }}\n            py={{ sm: \"15px\", base: \"5px\" }}\n            shadow=\"md\"\n            mb={mb}\n            _hover={{ cursor: \"pointer\", opacity: 0.8 }}\n            onClick={onClick}\n            flexDirection={{ sm: \"row\", base: \"column\" }}\n        >\n            {children}\n        </Flex>\n    );\n});\n","import { VFC } from \"react\";\nimport { Flex, IconButton, Text } from \"@chakra-ui/react\";\nimport { HiHeart } from \"react-icons/hi\";\n\ntype Props = {\n    value: number;\n};\n\nexport const LikeButton: VFC<Props> = (props) => {\n    const { value } = props;\n    return (\n        <Flex>\n            <IconButton\n                aria-label=\"like\"\n                icon={<HiHeart size=\"25px\" />}\n                size=\"0px\"\n                color=\"gray\"\n                bg=\"none\"\n                _focus={{ outline: \"none\" }}\n            />\n            <Text fontSize=\"15px\" color=\"gray\" ml=\"5px\" pt=\"1.5px\">\n                {value}\n            </Text>\n        </Flex>\n    );\n};\n","import { Text, Flex, IconButton } from \"@chakra-ui/react\";\nimport { HiShare } from \"react-icons/hi\";\n\nexport const ShareButton = () => {\n    return (\n        <Flex>\n            <IconButton\n                aria-label=\"like\"\n                icon={<HiShare size=\"23px\" />}\n                size=\"0px\"\n                color=\"gray\"\n                bg=\"none\"\n                _focus={{ outline: \"none\" }}\n            />\n            <Text fontSize=\"15px\" mr=\"5px\"></Text>\n        </Flex>\n    );\n};\n","import { VFC } from \"react\";\nimport { Flex, IconButton, Text } from \"@chakra-ui/react\";\nimport { HiOutlineChat } from \"react-icons/hi\";\n\ntype Props = {\n    value: number;\n};\n\nexport const CommentButton: VFC<Props> = (props) => {\n    const { value } = props;\n    return (\n        <Flex>\n            <HiOutlineChat size=\"24px\" color=\"gray\" />\n            <Text fontSize=\"15px\" color=\"gray\" ml=\"5px\" pt=\"1.5px\">\n                {value}\n            </Text>\n        </Flex>\n    );\n};\n","import { Flex } from \"@chakra-ui/react\";\nimport { memo, VFC } from \"react\";\nimport { LikeButton } from \"../../atoms/button/LikeButton\";\nimport { ShareButton } from \"../../atoms/button/ShareButton\";\nimport { CommentButton } from \"../../atoms/button/CommentButton\";\n\ntype Props = {\n    comment_val: number;\n    like_val: number;\n};\n\nexport const CardReactionButtons: VFC<Props> = memo((props) => {\n    const { comment_val, like_val } = props;\n\n    return (\n        <Flex\n            mt=\"5%\"\n            w={{ sm: \"none\", base: \"70%\" }}\n            mx={{ sm: \"0\", base: \"auto\" }}\n        >\n            <Flex w=\"33%\" mr=\"auto\">\n                <CommentButton value={comment_val} />\n            </Flex>\n            <Flex w=\"auto\" mr=\"auto\">\n                <LikeButton value={like_val} />\n            </Flex>\n            <Flex w=\"auto\" ml=\"auto\">\n                <ShareButton />\n            </Flex>\n        </Flex>\n    );\n});\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Box, Flex } from \"@chakra-ui/react\";\n\nimport { CardMusicBox } from \"../../../molecules/post_card/CardMusicBox\";\nimport { CardComment } from \"../../../molecules/post_card/CardComment\";\nimport { Rating } from \"../../../atoms/button/Rating\";\nimport { UserInfoBox } from \"../../../molecules/UserInfoBox\";\nimport { CardFrame } from \"../../../atoms/frame/CardFrame\";\nimport { PostsDataType } from \"../../../../type/api/PostsDataType\";\nimport { CardReactionButtons } from \"../../../molecules/post_card/CardReactionButtons\";\n\ntype Props = {\n    post: PostsDataType;\n};\n\nexport const LgPostCard: VFC<Props> = memo((props) => {\n    const { post } = props;\n    const { user, track, review, reaction, id } = post;\n    const { comment_val, like_val } = reaction;\n    const history = useHistory();\n    const onClickCard = () => {\n        history.push(`/post/${id}`);\n    };\n\n    return (\n        <Box display={{ sm: \"inline\", base: \"none\" }}>\n            <Flex position=\"relative\" w=\"100%\" h=\"100%\">\n                <CardFrame mb=\"2%\" onClick={onClickCard}>\n                    {/* 曲情報 */}\n                    <CardMusicBox\n                        img={track.img}\n                        title={track.title}\n                        artist={track.artist}\n                    />\n                    <Flex\n                        w=\"70%\"\n                        h=\"30vh\"\n                        pb=\"8vh\"\n                        mr=\"auto\"\n                        flexFlow=\"column\"\n                        textAlign=\"left\"\n                    >\n                        {/* コメント */}\n                        <CardComment title={review.title} body={review.body} />\n                    </Flex>\n                </CardFrame>\n                {/* 上からいいねボタン等を重ねる */}\n                <Flex position=\"absolute\" w=\"60%\" ml=\"32%\" mt=\"23.5vh\">\n                    <Flex flexDirection=\"column\" w=\"100%\">\n                        {/* 評価 */}\n                        <Rating rating={review.star} />\n                        {/* 投稿へのコメント、いいねなど */}\n                        <CardReactionButtons\n                            comment_val={comment_val}\n                            like_val={like_val}\n                        />\n                    </Flex>\n                    {/* コメントしたユーザー */}\n                    <Flex w=\"25%\">\n                        <UserInfoBox\n                            img={user.img}\n                            name={user.name}\n                            user_title={user.job}\n                            pl=\"8%\"\n                            m=\"auto\"\n                        />\n                    </Flex>\n                </Flex>\n            </Flex>\n        </Box>\n    );\n});\n","import axios from 'axios';\n\nconst apiClient = axios.create({\n    baseURL: '',\n    withCredentials: true,\n});\n\nexport default apiClient;\n","import { memo } from \"react\";\nimport { Spinner } from \"@chakra-ui/react\";\n\nexport const LoadingPageSpinner = memo(() => {\n    return (\n        <Spinner\n            thickness=\"4px\"\n            speed=\"0.8s\"\n            emptyColor=\"gray.200\"\n            color=\"#c4de71\"\n            size=\"xl\"\n            m=\"auto\"\n            mt=\"50%\"\n        />\n    );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\n\ntype Props = {\n    rating: number;\n};\n\nexport const SmRating: VFC<Props> = (props) => {\n    const { rating } = props;\n    const starSize = \"22px\";\n    const gap = \"1px\";\n\n    let fixedRating = rating.toString();\n    if (fixedRating.length === 1) {\n        fixedRating = fixedRating + \".0\";\n    }\n\n    return (\n        <Flex>\n            {[1, 2, 3, 4, 5].map((value) =>\n                rating >= value ? (\n                    <Box mx={gap}>\n                        <BsStarFill fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : rating >= value - 0.5 ? (\n                    <Box mx={gap}>\n                        <BsStarHalf fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : (\n                    <Box mx={gap}>\n                        <BsStar fontSize={starSize} color=\"orange\" />\n                    </Box>\n                )\n            )}\n        </Flex>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Box, Flex } from \"@chakra-ui/react\";\n\nimport { CardMusicBox } from \"../../../molecules/post_card/CardMusicBox\";\nimport { CardComment } from \"../../../molecules/post_card/CardComment\";\nimport { SmRating } from \"../../../atoms/button/SmRating\";\nimport { UserInfoBox } from \"../../../molecules/UserInfoBox\";\nimport { CardFrame } from \"../../../atoms/frame/CardFrame\";\nimport { PostsDataType } from \"../../../../type/api/PostsDataType\";\nimport { CardReactionButtons } from \"../../../molecules/post_card/CardReactionButtons\";\n\ntype Props = {\n    post: PostsDataType;\n};\n\nexport const SmPostCard: VFC<Props> = memo((props) => {\n    const { post } = props;\n    const { user, track, review, reaction, id } = post;\n    const { comment_val, like_val } = reaction;\n    const history = useHistory();\n    const onClickCard = () => {\n        history.push(`/post/${id}`);\n    };\n\n    return (\n        <Box display={{ sm: \"none\", base: \"inline\" }}>\n            <Flex position=\"relative\" w=\"100%\" h=\"100%\">\n                <CardFrame mb=\"2%\" onClick={onClickCard}>\n                    {/* 曲情報 */}\n                    <CardMusicBox\n                        img={track.img}\n                        title={track.title}\n                        artist={track.artist}\n                    />\n                    <Box mx=\"auto\">\n                        {/* <SmRating rating={review.star} isRateDisable={true} /> */}\n                        <SmRating rating={review.star} />\n                    </Box>\n                    <Flex\n                        w=\"100%\"\n                        h=\"30vh\"\n                        mr=\"auto\"\n                        mb=\"1%\"\n                        mt=\"5%\"\n                        flexFlow=\"column\"\n                        textAlign=\"left\"\n                    >\n                        {/* コメント */}\n                        <CardComment title={review.title} body={review.body} />\n                    </Flex>\n                </CardFrame>\n                {/* 上からいいねボタン等を重ねる */}\n                <Flex\n                    flexDirection=\"column\"\n                    position=\"absolute\"\n                    w=\"100%\"\n                    mt=\"75vh\"\n                >\n                    {/* 投稿へのコメント、いいねなど */}\n                    <Flex mx=\"auto\">\n                        <UserInfoBox\n                            img={user.img}\n                            name={user.name}\n                            user_title={user.job}\n                            pl=\"8%\"\n                            m=\"auto\"\n                        />\n                    </Flex>\n                    <CardReactionButtons\n                        comment_val={comment_val}\n                        like_val={like_val}\n                    />\n                </Flex>\n            </Flex>\n        </Box>\n    );\n});\n","import { memo, useEffect, useState } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Box } from \"@chakra-ui/react\";\nimport axios from \"axios\";\n\nimport { homeState } from \"../../../store/homeState\";\nimport { LgPostCard } from \"../../organisms/home/post/LgPostCard\";\nimport { PostsDataType } from \"../../../type/api/PostsDataType\";\nimport Posts from \"../../../test_json/allPosts.json\";\nimport { useGetPosts } from \"../../../hooks/api/useGetPosts\";\nimport { LoadingPageSpinner } from \"../../organisms/LoadingPageSpinner\";\nimport { SmPostCard } from \"../../organisms/home/post/SmPostCard\";\n\nexport const Recent = memo(() => {\n    // グローバルStateを変更、それをもとにヘッダーを変更とapiリクエストをする\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"recent\" });\n    /* ↓本番環境用 */\n    const { getPosts, api_posts, loading } = useGetPosts(\"recent\");\n    useEffect(() => getPosts(), [getPosts]);\n\n    /* ↓ローカル環境でのテスト用（test_jsonを使用） */\n    // const api_posts: Array<PostsDataType> = Posts;\n\n    return (\n        /* 本番環境用 */\n        <>\n            {loading ? (\n                <LoadingPageSpinner />\n            ) : (\n                <Box>\n                    {/* apiからjsonを引っ張り、map関数でカードを繰り返し描画 */}\n                    {api_posts.map((obj) => (\n                        <Box key={obj.id}>\n                            {/* Object.assign(オブジェクト)で、オブジェクトのスプレッドを実現 */}\n                            <LgPostCard post={Object.assign(obj)} />\n                            <SmPostCard post={Object.assign(obj)} />\n                        </Box>\n                    ))}\n                </Box>\n            )}\n        </>\n\n        /* ↓ローカル開発用 */\n        // <Box>\n        //     {/* jsonを引っ張り、map関数でカードを繰り返し描画 */}\n        //     {api_posts.map((obj) => (\n        //         <Box key={obj.id}>\n        //             {/* Object.assign(オブジェクト)で、オブジェクトのスプレッドを実現 */}\n        //             <LgPostCard post={Object.assign(obj)} />\n        //             <SmPostCard post={Object.assign(obj)} />\n        //         </Box>\n        //     ))}\n        // </Box>\n    );\n});\n","import { useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport apiClient from \"../../client/apiClient\";\n\nimport { PostsDataType } from \"../../type/api/PostsDataType\";\nimport { useMessage } from \"../message/useMessage\";\nimport { useErrorMessage } from \"../useErrorMessage\";\n\ntype Sort = \"recent\" | \"follow\" | \"popular\";\n\nexport const useGetPosts = (sort: Sort) => {\n    const [api_posts, setApiPosts] = useState<Array<PostsDataType>>([]);\n    const [loading, setLoading] = useState(false);\n\n    const getPosts = useCallback(() => {\n        setLoading(true);\n        apiClient\n            .get<Array<PostsDataType>>(`/api/posts/recent`)\n            .then((res) => setApiPosts(res.data))\n            .catch( () =>\n            {\n            })\n            .finally(() => setLoading(false));\n    }, []);\n\n    return { getPosts, api_posts, loading };\n};\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Alert,\n    AlertIcon,\n    AlertTitle,\n    AlertDescription,\n    CloseButton,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n    title: string;\n    body: string;\n};\n\nexport const Alert404: VFC<Props> = memo((props) => {\n    const { title, body } = props;\n    const history = useHistory();\n    const onClickPageBack = () => {\n        history.goBack();\n    };\n\n    return (\n        <Alert\n            status=\"error\"\n            variant=\"subtle\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            textAlign=\"center\"\n            height=\"200px\"\n            pt=\"40px\"\n        >\n            <AlertIcon boxSize=\"40px\" mr={0} />\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n                {title}\n            </AlertTitle>\n            <AlertDescription maxWidth=\"sm\">{body}</AlertDescription>\n        </Alert>\n    );\n});\n","import { Alert404 } from \"../../../organisms/home/Alert404\";\n\nexport const Detail404 = () => {\n    return <Alert404 title=\"エラー\" body=\"投稿が見つかりませんでした。\" />;\n};\n","export const gradationGreen = \"linear(to-tl, green, #c4de71)\"\n","import { AspectRatio, Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { gradationGreen } from \"../atoms/color/gradationGreen\";\nimport { BsQuestionCircle } from \"react-icons/bs\";\nimport { ShortText } from \"../atoms/typography/ShortText\";\n\ntype Props = {\n    id: string | undefined;\n    title: string | undefined;\n    album: string | undefined;\n    artist: string | undefined;\n    release: string | undefined;\n};\n\nexport const MusicDetailBox: VFC<Props> = (props) => {\n    const {\n        id = undefined,\n        title = undefined,\n        album = undefined,\n        artist = undefined,\n        release = undefined,\n    } = props;\n    return (\n        <Flex flexDirection={{ sm: \"row\", base: \"column\" }}>\n            <AspectRatio\n                ratio={1 / 1}\n                w={{ sm: \"50%\", base: \"100%\" }}\n                h={{ sm: \"50%\", base: \"40vh\" }}\n                mx={{ sm: \"0\", base: \"auto\" }}\n            >\n                {id === undefined ? (\n                    <Box bgGradient={gradationGreen}>\n                        <BsQuestionCircle color=\"gray\" fontSize=\"13vh\" />\n                    </Box>\n                ) : (\n                    <iframe\n                        src={`https://open.spotify.com/embed/track/${id}`}\n                        frameBorder=\"0\"\n                        allow=\"encrypted-media\"\n                    />\n                )}\n            </AspectRatio>\n            <Flex\n                alignItems=\"start\"\n                flexFlow=\"column\"\n                ml={5}\n                mt={{ sm: \"auto\", base: \"3vh\" }}\n                mb=\"2%\"\n                overflow=\"hidden\"\n                w={{ sm: \"65%\", base: \"100%\" }}\n            >\n                <ShortText\n                    fontWeight=\"bold\"\n                    fontSize={{ sm: \"25px\", base: \"lg\" }}\n                    mb=\"1vh\"\n                >\n                    {title === undefined ? \"楽曲情報が取得できません\" : title}\n                </ShortText>\n                <ShortText fontSize=\"sm\">\n                    収録アルバム： {album === undefined ? \"???\" : album}\n                </ShortText>\n                <ShortText fontSize=\"sm\">\n                    アーティスト：\n                    {artist === undefined ? \"???\" : artist}\n                </ShortText>\n                <ShortText fontSize=\"sm\">\n                    リリース： {release === undefined ? \"???\" : release}\n                </ShortText>\n            </Flex>\n        </Flex>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { CommentButton } from \"../../atoms/button/CommentButton\";\nimport { LikeButton } from \"../../atoms/button/LikeButton\";\nimport { ShareButton } from \"../../atoms/button/ShareButton\";\n\ntype Props = {\n  comment_val: number;\n  like_val: number;\n};\n\nexport const ReactionButtons: VFC<Props> = memo((props) => {\n  const { comment_val, like_val } = props;\n  return (\n    <Flex justifyContent=\"center\" w=\"80%\" mt={5}>\n      <Box mr=\"auto\">\n        <CommentButton value={comment_val} />\n      </Box>\n      <Box mx=\"auto\">\n        <LikeButton value={like_val} />\n      </Box>\n      <Box ml=\"auto\">\n        <ShareButton />\n      </Box>\n    </Flex>\n  );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { Rating } from \"../../atoms/button/Rating\";\nimport { ReactionButtons } from \"../../molecules/post_detail/ReactionButtons\";\nimport { UserInfoBox } from \"../../molecules/UserInfoBox\";\n\ntype Props = {\n    userName: string | undefined;\n    userTitle: string | undefined;\n    userImg: string | undefined;\n    rating?: number;\n    title: string;\n    body: string;\n    commentVal?: number;\n    likeVal?: number;\n};\n\nexport const DetailBox: VFC<Props> = (props) => {\n    const {\n        userName = \"\",\n        userTitle = \"\",\n        userImg = \"\",\n        rating,\n        title = \"\",\n        body = \"\",\n        commentVal,\n        likeVal,\n    } = props;\n    return (\n        <Box>\n            <Flex textAlign=\"left\">\n                <Box mr={2}>\n                    <UserInfoBox\n                        name={userName}\n                        user_title={userTitle}\n                        img={userImg}\n                    />\n                </Box>\n                {/* コメントのときは評価の星を表示しない */}\n                {rating === undefined ? <div /> : <Rating rating={rating} />}\n            </Flex>\n            <Box mt={5} textAlign=\"left\">\n                <Text fontSize=\"lg\" fontWeight=\"bold\">\n                    {title}\n                </Text>\n                <Text fontSize=\"sm\" pr={{ sm: \"10px\", base: \"none\" }} mt={2}>\n                    {body}\n                </Text>\n            </Box>\n            {/* コメントのときは、「コメント」、「いいね」、「シェア」を表示しない */}\n            {commentVal === undefined || likeVal === undefined ? (\n                <div />\n            ) : (\n                <ReactionButtons comment_val={commentVal} like_val={likeVal} />\n            )}\n        </Box>\n    );\n};\n","import { useEffect, VFC } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Box, Divider } from \"@chakra-ui/react\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { homeState } from \"../../../../store/homeState\";\nimport { useGetDetail } from \"../../../../hooks/api/useGetDetail\";\nimport json_postDetail from \"../../../../test_json/postDetail.json\";\nimport { LoadingCard } from \"../../../organisms/home/post/LoadingCard\";\nimport { LoadingPageSpinner } from \"../../../organisms/LoadingPageSpinner\";\nimport { MusicDetailBox } from \"../../../organisms/MusicDetailBox\";\nimport { DetailBox } from \"../../../organisms/detail/DetailBox\";\n\ntype Param = {\n    id: string;\n};\n\ntype Props = {};\n\nexport const PostDetail: VFC<Props> = (props) => {\n    const {} = props;\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"detail\" });\n    const { id } = useParams<Param>();\n    /* ↓本番環境用 */\n    const { getPostDetail, api_postDetail, loading } = useGetDetail(id);\n    useEffect(() => getPostDetail(), []);\n\n    /* ローカルでのテスト用*/\n    // const api_postDetail = json_postDetail;\n\n    return (\n        /* ↓本番環境用 */\n        <>\n            {loading ? (\n                <LoadingPageSpinner />\n            ) : (\n                <Box>\n                    <MusicDetailBox\n                        id={api_postDetail.track.id}\n                        title={api_postDetail.track.title}\n                        album={api_postDetail.track.album}\n                        artist={api_postDetail.track.artist}\n                        release={api_postDetail.track.release}\n                    />\n                    <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n                    <DetailBox\n                        userName={api_postDetail.user.name}\n                        userTitle={api_postDetail.user.job}\n                        userImg={api_postDetail.user.img}\n                        rating={api_postDetail.review.star}\n                        title={api_postDetail.review.title}\n                        body={api_postDetail.review.body}\n                        commentVal={api_postDetail.reaction.comment_val}\n                        likeVal={api_postDetail.reaction.like_val}\n                    />\n                    <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n                </Box>\n            )}\n        </>\n\n        /* ローカルでのテスト用*/\n        // <Box mx={5}>\n        //     <MusicDetailBox\n        //         id={`https://open.spotify.com/embed/track/${api_postDetail.track.id}`}\n        //         title={api_postDetail.track.title}\n        //         album={api_postDetail.track.album}\n        //         artist={api_postDetail.track.artist}\n        //         release={api_postDetail.track.release}\n        //     />\n        //     <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n        //     <DetailBox\n        //         userName={api_postDetail.user.name}\n        //         userTitle={api_postDetail.user.job}\n        //         userImg={api_postDetail.user.img}\n        //         rating={api_postDetail.review.star}\n        //         title={api_postDetail.review.title}\n        //         body={api_postDetail.review.body}\n        //         commentVal={api_postDetail.reaction.comment_val}\n        //         likeVal={api_postDetail.reaction.like_val}\n        //     />\n        //     <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n        // </Box>\n    );\n};\n","import { useCallback, useState } from \"react\";\nimport { PostsDataType } from \"../../type/api/PostsDataType\";\nimport failed from \"../../test_json/failedDetail.json\";\nimport apiClient from \"../../client/apiClient\";\nimport { useHistory } from \"react-router\";\n\nexport const useGetDetail = ( id: string ) =>\n{\n    const [ api_postDetail, setApiPostDetail ] = useState<PostsDataType>( failed );\n    const [ loading, setLoading ] = useState( false )\n    const history = useHistory()\n    const getPostDetail = useCallback(() =>\n    {\n        setLoading( true );\n\n        apiClient\n        .get<PostsDataType>( `/api/posts/${ id }` )\n        .then( ( res ) => setApiPostDetail( res.data ) )\n        .catch( () =>\n        {\n            history.push(\"/page404\")\n        }\n        ).finally( () => setLoading( false ) );\n    },[])\n\n    return { getPostDetail, api_postDetail, loading };\n};\n","import { Breadcrumb, BreadcrumbItem, BreadcrumbLink } from \"@chakra-ui/react\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { memo, useEffect, useState, VFC } from \"react\";\n\ntype Props = {\n    step: \"track\" | \"rate\" | \"check\";\n    goTrackInfo: () => void;\n    goRate: () => void;\n    goCheck: () => void;\n    isTrackNull: boolean;\n    isRatesNull: boolean;\n};\n\ntype Weight = \"normal\" | \"bold\";\ntype Color = \"black\" | \"gray.500\";\n\nexport const CreateBreadcrumb: VFC<Props> = memo((props) => {\n    const { step, goTrackInfo, goRate, goCheck, isTrackNull, isRatesNull } =\n        props;\n\n    const [trackColor, setTrackColor] = useState<Color>(\"gray.500\");\n    const [rateColor, setRateColor] = useState<Color>(\"gray.500\");\n    const [checkColor, setCheckColor] = useState<Color>(\"gray.500\");\n    const [trackWeight, setTrackWeight] = useState<Weight>(\"normal\");\n    const [rateWeight, setRateWeight] = useState<Weight>(\"normal\");\n    const [checkWeight, setCheckWeight] = useState<Weight>(\"normal\");\n\n    useEffect(() => {\n        // 一旦初期化して変化部分のみ値を指定する\n        setTrackWeight(\"normal\");\n        setTrackColor(\"gray.500\");\n        setRateWeight(\"normal\");\n        setRateColor(\"gray.500\");\n        setCheckWeight(\"normal\");\n        setCheckColor(\"gray.500\");\n        if (step === \"track\") {\n            setTrackWeight(\"bold\");\n            setTrackColor(\"black\");\n        } else if (step === \"rate\") {\n            setRateWeight(\"bold\");\n            setRateColor(\"black\");\n        } else {\n            setCheckWeight(\"bold\");\n            setCheckColor(\"black\");\n        }\n    }, [step]);\n\n    // 楽曲情報が入力されていなければ評価画面に行けない\n    // 評価が入力されていなければ内容確認画面に行けない\n    var canMoveRate: \"auto\" | \"none\" = isTrackNull ? \"none\" : \"auto\";\n    var canMoveCheck: \"auto\" | \"none\" =\n        isTrackNull || isRatesNull ? \"none\" : \"auto\";\n\n    useEffect(() => {\n        isTrackNull ? (canMoveRate = \"none\") : (canMoveRate = \"auto\");\n    }, [isTrackNull]);\n\n    useEffect(() => {\n        isTrackNull && isRatesNull\n            ? (canMoveCheck = \"none\")\n            : (canMoveCheck = \"auto\");\n    }, [isTrackNull]);\n\n    return (\n        <Breadcrumb\n            spacing={{ sm: \"20px\", base: \"10px\" }}\n            ml=\"0px\"\n            separator={\n                <ChevronRightIcon\n                    color=\"gray.500\"\n                    fontSize={{ sm: \"30px\", base: \"20px\" }}\n                />\n            }\n            textAlign=\"left\"\n            mb={{ sm: \"30px\", base: \"15px\" }}\n        >\n            <BreadcrumbItem isCurrentPage={step === \"track\"}>\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={trackColor}\n                    fontWeight={trackWeight}\n                    onClick={goTrackInfo}\n                >\n                    楽曲情報\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbItem\n                isCurrentPage={step === \"rate\"}\n                pointerEvents={canMoveRate}\n            >\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={rateColor}\n                    fontWeight={rateWeight}\n                    onClick={goRate}\n                >\n                    評価\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbItem\n                isCurrentPage={step === \"check\"}\n                pointerEvents={canMoveCheck}\n            >\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={checkColor}\n                    fontWeight={checkWeight}\n                    onClick={goCheck}\n                >\n                    内容確認\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n        </Breadcrumb>\n    );\n});\n","import { Button } from \"@chakra-ui/button\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { VFC } from \"react\";\n\ntype Props = {\n    onClick: () => void;\n    mt?: string | { md?: string; sm?: string; base?: string };\n    isDisabled?: boolean;\n    text: string;\n};\n\nexport const CreateTransButton: VFC<Props> = (props) => {\n    const { onClick, mt = \"none\", isDisabled = false, text } = props;\n    return (\n        <Button\n            mt={mt}\n            w=\"auto\"\n            h={{ sm: \"30px\", base: \"25px\" }}\n            ml=\"auto\"\n            bg=\"orange.300\"\n            color=\"white\"\n            onClick={onClick}\n            fontSize={{ sm: \"15px\", base: \"12px\" }}\n            _focus={{ outline: \"none\" }}\n            isDisabled={isDisabled}\n        >\n            {text}\n        </Button>\n    );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback } from \"react\";\nimport { useToast } from \"@chakra-ui/react\";\n\ntype Props = {\n  title: string;\n  status: \"info\" | \"warning\" | \"success\" | \"error\";\n};\n\nexport const useMessage = () => {\n  const toast = useToast();\n\n  const showMessage = useCallback((props: Props) => {\n    const { title, status } = props;\n    toast({\n      title,\n      status,\n      position: \"top\",\n      duration: 2000,\n      isClosable: true\n    });\n  }, []);\n\n  return { showMessage };\n};\n","import { Box, Button, Flex, Input, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState, VFC } from \"react\";\n\nimport { gradationGreen } from \"../../atoms/color/gradationGreen\";\nimport { MusicDetailBox } from \"../MusicDetailBox\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { useGetTrack } from \"../../../hooks/api/useGetTrack\";\nimport { useValidateTrackURL } from \"../../../hooks/useValidateTrackURL\";\nimport { useMessage } from \"../../../hooks/message/useMessage\";\nimport { TrackDataType } from \"../../../type/api/TrackDataType\";\n\ntype Props = {\n    goRate: () => void;\n    onChangeTrackURL: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    trackUrl: string;\n    trackId: string | undefined;\n    setTrackId: (id: string | undefined) => void;\n    trackData: TrackDataType;\n    saveTrackData: (obj: TrackDataType) => void;\n    isTrackNull: boolean;\n};\n\nexport const CreateTrackInfo: VFC<Props> = (props) => {\n    const {\n        goRate,\n        onChangeTrackURL,\n        trackUrl,\n        trackId,\n        setTrackId,\n        isTrackNull,\n        trackData,\n        saveTrackData,\n    } = props;\n    const { getTrack } = useGetTrack();\n    const { validateTrackURL } = useValidateTrackURL();\n    const { showMessage } = useMessage();\n\n    // checkTrackとuseEffect内の楽曲登録作業の橋渡しをするstateを準備したい\n    // 一旦、このページ内の状態で楽曲データを預かるためのstate\n    // これを使って楽曲有無の確認をするapiを叩き、確認できたら正式にcreateグローバルstateに登録\n    const [onceTrack, setOnceTrack] = useState<TrackDataType>();\n    const saveOnceTrackData = (val: TrackDataType) => {\n        setOnceTrack(val);\n    };\n\n    const checkTrack = () => {\n        const validatedTrackId = validateTrackURL(trackUrl);\n        // バリデーションを行う\n        if (validatedTrackId === undefined) {\n            showMessage({\n                title: \"正しいURLを入力してください\",\n                status: \"error\",\n            });\n        }\n        // バリデーションをクリアしたidで実際に楽曲を取得できるか判定\n        else {\n            getTrack(validatedTrackId, saveOnceTrackData);\n        }\n    };\n\n    // APIで楽曲情報が確認できたタイミングで保存\n    // ちゃんと取得できていたら、一旦保存しておいた楽曲情報を正式にグローバルで保存\n    useEffect(() => {\n        if (onceTrack !== undefined) {\n            setTrackId(onceTrack.id);\n            saveTrackData(onceTrack);\n        }\n    }, [onceTrack]);\n\n    return (\n        <Box>\n            {/* 入力された共有URIから楽曲が取得できていたら表示 */}\n            {trackId !== undefined && (\n                <MusicDetailBox\n                    id={trackData?.id}\n                    title={trackData?.title}\n                    album={trackData?.album}\n                    artist={trackData?.artist}\n                    release={trackData?.release}\n                />\n            )}\n            <Flex flexDirection=\"column\" mt=\"30px\">\n                <Box>\n                    <Text\n                        ml={1}\n                        mb={2}\n                        fontSize={{ sm: \"lg\", base: \"13px\" }}\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        Spotifyの楽曲シェア用URLを入力してください\n                    </Text>\n                    <Flex>\n                        <Input onChange={onChangeTrackURL} value={trackUrl} />\n                        <Button\n                            ml=\"2%\"\n                            bgGradient={gradationGreen}\n                            color=\"white\"\n                            fontSize={{ sm: \"lg\", base: \"sm\" }}\n                            mt=\"auto\"\n                            onClick={checkTrack}\n                        >\n                            確認\n                        </Button>\n                    </Flex>\n                </Box>\n                <CreateTransButton\n                    onClick={goRate}\n                    mt={{ sm: \"30px\", base: \"20px\" }}\n                    isDisabled={isTrackNull}\n                    text=\"次へ\"\n                />\n            </Flex>\n        </Box>\n    );\n};\n","import { useCallback, useState } from \"react\";\n\nimport apiClient from \"../../client/apiClient\";\nimport { TrackDataType } from \"../../type/api/TrackDataType\";\nimport {useMessage} from \"../message/useMessage\"\n\n\nexport const useGetTrack = () =>\n{\n    const { showMessage } = useMessage();\n    const getTrack = useCallback( ( id: string | undefined, saveTrack: (val:TrackDataType )=>void ) =>\n    {\n        var track: TrackDataType\n\n        apiClient\n            .get<TrackDataType>(`/api/track/${id}`)\n            .then( ( res ) =>\n            {\n                saveTrack(res.data)\n            }\n            )\n            .catch( () =>\n            {\n                saveTrack( undefined )\n                showMessage( {title: \"楽曲を取得できませんでした\",status: \"error\",});\n            })\n    }, []);\n\n    return { getTrack };\n};\n","import { useCallback, useState } from \"react\";\nimport { useMessage } from \"./message/useMessage\";\n\nexport const useValidateTrackURL = () =>\n{    const head = /(https\\:\\/\\/open\\.spotify\\.com\\/track\\/)/;\n    const foot = /(\\?si=)/;\n    const validateTrackURL = useCallback( ( url: string ) =>\n    {\n        var id:string|undefined;\n        const regexHead = head.test( url );\n        const regexFoot = foot.test( url );\n        {\n            // urlの頭とおしりがspotifyの楽曲シェアURLのものか判定\n            if ( regexHead && regexFoot )\n            {\n                 const result = url.match(\n                    /https\\:\\/\\/open\\.spotify\\.com\\/track\\/(.*)\\?si=/\n                 );\n                // もし楽曲のURLであれば、楽曲IDの部分の文字数が適切なものか判定\n                if ( result![1].length === 22 )\n                {\n                    id = result![1];\n                }\n                else\n                {\n                    id = undefined;\n                }\n            } else{\n                    id = undefined;\n            }\n        }\n        return id;\n    },[])\n        return { validateTrackURL }\n}\n","import { useState, VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\nimport { Box, Flex, useBreakpointValue } from \"@chakra-ui/react\";\n\ntype Props = {\n    num: number;\n    rate: number;\n    setRate: (val: number) => void;\n};\n\nexport const StarButton: VFC<Props> = (props) => {\n    const { num, rate, setRate } = props;\n\n    const onClickHalf = () => {\n        setRate(num - 0.5);\n    };\n    const onClickFill = () => {\n        setRate(num);\n    };\n\n    const StarSize = useBreakpointValue({ sm: \"50px\", base: \"40px\" });\n    const starGap = useBreakpointValue({ sm: \"60px\", base: \"45px\" });\n\n    return (\n        <Box>\n            {/* 星のアイコンを表示、zIndexによってボタンと重ねる  */}\n            <Flex\n                boxSize=\"50px\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                position=\"absolute\"\n                zIndex=\"1\"\n            >\n                {rate >= num ? (\n                    <BsStarFill fontSize={StarSize} color=\"orange\" />\n                ) : rate >= num - 0.5 ? (\n                    <BsStarHalf fontSize={StarSize} color=\"orange\" />\n                ) : (\n                    <BsStar fontSize={StarSize} color=\"orange\" />\n                )}\n            </Flex>\n            {/* 星のアイコンの上に見えないボタンを設置 */}\n            <Flex boxSize=\"50px\" position=\"absolute\" zIndex=\"2\">\n                {/* 左半分のボタン */}\n                <button\n                    onClick={onClickHalf}\n                    style={{\n                        borderRadius: \"0\",\n                        height: \"100%\",\n                        width: \"50%\",\n                    }}\n                ></button>\n                {/* 右半分のボタン */}\n                <button\n                    onClick={onClickFill}\n                    style={{\n                        borderRadius: \"0\",\n                        height: \"100%\",\n                        width: \"50%\",\n                    }}\n                ></button>\n            </Flex>\n            <Box w={starGap} />\n        </Box>\n    );\n};\n","import { VFC } from \"react\";\nimport { Flex, Text } from \"@chakra-ui/react\";\nimport { StarButton } from \"../../atoms/button/StarButton\";\n\ntype Props = {\n    rate: number;\n    setRate: (val: number) => void;\n};\n\nexport const FiveStarButton: VFC<Props> = (props) => {\n    const { rate, setRate } = props;\n    return (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Flex mt=\"10px\" mb={{ sm: \"50px\", base: \"45px\" }}>\n                {[1, 2, 3, 4, 5].map((value) => (\n                    <StarButton num={value} rate={rate} setRate={setRate} />\n                ))}\n            </Flex>\n            <Text\n                mt={{ sm: \"5px\", base: \"0\" }}\n                mx=\"auto\"\n                pr={{ sm: \"10px\", base: \"0\" }}\n                pl={{ sm: \"0\", base: \"5px\" }}\n                w=\"30%\"\n                fontWeight=\"bold\"\n                fontSize={{ sm: \"25px\", base: \"20px\" }}\n                color=\"gray.600\"\n            >\n                {rate.toFixed(1)}\n            </Text>\n        </Flex>\n    );\n};\n","import { Box, Flex, Input, Text, Textarea } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { FiveStarButton } from \"../../molecules/create/FiveStarButton\";\n\ntype Props = {\n    goTrackInfo: () => void;\n    goCheck: () => void;\n    onChangeRate: (val: number) => void;\n    onChangeTitle: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onChangeBody: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    rate: number;\n    title: string;\n    body: string;\n    isRatesNull: boolean;\n};\n\nexport const CreateRate: VFC<Props> = (props) => {\n    const {\n        goTrackInfo,\n        goCheck,\n        onChangeRate,\n        onChangeTitle,\n        onChangeBody,\n        rate,\n        title,\n        body,\n        isRatesNull,\n    } = props;\n\n    return (\n        <Flex flexDirection=\"column\">\n            <Flex flexDirection=\"column\">\n                <Text\n                    fontSize={{ sm: \"lg\", base: \"md\" }}\n                    ml=\"10px\"\n                    fontWeight=\"semibold\"\n                    color=\"gray.700\"\n                >\n                    ① 評価\n                </Text>\n                <Box textAlign=\"center\">\n                    <FiveStarButton rate={rate} setRate={onChangeRate} />\n                </Box>\n            </Flex>\n            <Box mt=\"30px\">\n                <Flex>\n                    <Text\n                        fontSize={{ sm: \"lg\", base: \"md\" }}\n                        ml=\"10px\"\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        ① タイトル（30字以内）\n                    </Text>\n                    {title.length >= 30 && (\n                        <Text color=\"red\">※30字を超えています</Text>\n                    )}\n                </Flex>\n                <Input\n                    type=\"text\"\n                    w=\"100%\"\n                    mt=\"10px\"\n                    onChange={onChangeTitle}\n                    value={title}\n                />\n            </Box>\n            <Box mt=\"30px\">\n                <Flex>\n                    <Text\n                        fontSize={{ sm: \"lg\", base: \"md\" }}\n                        ml=\"10px\"\n                        h=\"auto\"\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        ① 本文（500字以内）\n                    </Text>\n                    {body.length >= 500 && (\n                        <Text color=\"red\">※500字を超えています</Text>\n                    )}\n                </Flex>\n                <Textarea\n                    type=\"text\"\n                    w=\"100%\"\n                    h=\"100px\"\n                    mt=\"10px\"\n                    onChange={onChangeBody}\n                    value={body}\n                />\n            </Box>\n            <Flex ml=\"auto\">\n                <Box>\n                    <CreateTransButton\n                        onClick={goTrackInfo}\n                        mt=\"30px\"\n                        text=\"戻る\"\n                    />\n                </Box>\n                <Box w=\"30px\" />\n                <Box>\n                    <CreateTransButton\n                        onClick={goCheck}\n                        mt=\"30px\"\n                        isDisabled={isRatesNull}\n                        text=\"次へ\"\n                    />\n                </Box>\n            </Flex>\n        </Flex>\n    );\n};\n","import { atom } from \"recoil\";\nimport { MeData } from \"../type/api/MeDataType\";\n\nexport const meState = atom<MeData>( {\n    key: \"meState\",\n    default: { id:undefined, name:undefined, email:undefined }\n} );\n","import { Box, Divider, Flex } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { usePostCreate } from \"../../../hooks/api/usePostCreate\";\nimport { meState } from \"../../../store/meState\";\nimport { TrackDataType } from \"../../../type/api/TrackDataType\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { DetailBox } from \"../detail/DetailBox\";\nimport { MusicDetailBox } from \"../MusicDetailBox\";\n\ntype Props = {\n    trackData: TrackDataType;\n    rate: number;\n    title: string;\n    body: string;\n    trackId: string | undefined;\n    goRate: () => void;\n    setTransAlert: (bool: boolean) => void;\n};\n\nexport const CreateCheck: VFC<Props> = (props) => {\n    const { trackData, rate, title, body, goRate, trackId, setTransAlert } =\n        props;\n\n    // ユーザー情報を取得\n    const me = useRecoilValue(meState);\n\n    // 現在の内容で確定して投稿する\n    const { postCreate } = usePostCreate();\n    const onConfirm = () => {\n        postCreate(title, body, rate, trackId, setTransAlert);\n    };\n\n    return (\n        <Flex flexDirection=\"column\">\n            <MusicDetailBox\n                id={trackData?.id}\n                title={trackData?.title}\n                album={trackData?.album}\n                artist={trackData?.artist}\n                release={trackData?.release}\n            />\n            <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n            <DetailBox\n                userName={me.name}\n                userTitle=\"\"\n                userImg=\"\"\n                rating={rate}\n                title={title}\n                body={body}\n            />\n            <Divider orientation=\"horizontal\" w=\"100%\" mt={5} />\n            <Flex ml=\"auto\">\n                <Box>\n                    <CreateTransButton onClick={goRate} mt=\"30px\" text=\"戻る\" />\n                </Box>\n\n                <Box w=\"30px\" />\n                <Box>\n                    <CreateTransButton\n                        onClick={onConfirm}\n                        mt=\"30px\"\n                        text=\"この内容で投稿する\"\n                    />\n                </Box>\n            </Flex>\n        </Flex>\n    );\n};\n","import { string } from \"prop-types\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport apiClient from \"../../client/apiClient\";\nimport {useMessage} from \"../message/useMessage\"\n\n\nexport const usePostCreate = () =>\n{\n    const history = useHistory();\n    const { showMessage } = useMessage();\n    const postCreate = useCallback( ( title:string, body:string, rate: number, trackId:string|undefined, setTransAlert:(bool:boolean)=>void ) =>\n    {\n        const data = {\n            title: title,\n            body: body,\n            rate: rate,\n            trackId:trackId\n        }\n\n        apiClient\n            .post( `/api/create`, data)\n            .then( ( res ) =>\n            {\n                showMessage( { title: \"投稿しました\", status: \"success\", } );\n                setTransAlert( false );\n                history.push( \"/\" );\n            }\n            )\n            .catch( () =>\n            {\n                showMessage( {title: \"投稿に失敗しました\",status: \"error\",});\n            })\n    }, []);\n\n    return { postCreate };\n};\n","import { ChangeEvent, memo, useEffect, useState } from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport { Prompt } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { CreateBreadcrumb } from \"../molecules/create/CreateBreadcrumb\";\nimport { CreateTrackInfo } from \"../organisms/create/CreateTrackInfo\";\nimport { CreateRate } from \"../organisms/create/CreateRate\";\nimport { CreateCheck } from \"../organisms/create/CreateCheck\";\nimport { homeState } from \"../../store/homeState\";\nimport { TrackDataType } from \"../../type/api/TrackDataType\";\n\nexport const Create = memo(() => {\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"create\" });\n\n    // 画面遷移のためのState\n    const [step, setStep] = useState<\"track\" | \"rate\" | \"check\">(\"track\");\n    const goTrackInfo = () => {\n        setStep(\"track\");\n    };\n    const goRate = () => {\n        setStep(\"rate\");\n    };\n    const goCheck = () => {\n        setStep(\"check\");\n    };\n\n    // 各種投稿内容を保存しておくためのState\n    // trackIdは楽曲情報表示や「次へ」ボタンが押せるかなどの判定に使われる\n    const [trackUrl, setTrackUrl] = useState<string>(\"\");\n    const [trackId, setTrackId] = useState<string | undefined>(undefined);\n    // const [trackId, setTrackId] = useState<string | undefined>(\"\");\n    const [rate, setRate] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n\n    const onChangeTrackURL = (e: ChangeEvent<HTMLInputElement>) =>\n        setTrackUrl(e.target.value);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) =>\n        setTitle(e.target.value);\n\n    const onChangeBody = (e: ChangeEvent<HTMLTextAreaElement>) =>\n        setBody(e.target.value);\n\n    const onChangeRate = (val: number) => {\n        setRate(val);\n    };\n\n    const changeTrackId = (id: string | undefined) => {\n        setTrackId(id);\n    };\n\n    // TrackIdが空の場合はほかの画面への遷移をブロックする\n    const [isTrackNull, setIsTrackNull] = useState<boolean>(true);\n    useEffect(() => {\n        trackId === undefined ? setIsTrackNull(true) : setIsTrackNull(false);\n    }, [trackId]);\n\n    // 評価が書かれていないor字数制限よりも多い場合は確認画面への遷移をブロックする\n    const [isRatesNull, setIsRatesNull] = useState<boolean>(true);\n    useEffect(() => {\n        rate === 0.0 ||\n        title === \"\" ||\n        title.length >= 30 ||\n        body === \"\" ||\n        body.length >= 500\n            ? setIsRatesNull(true)\n            : setIsRatesNull(false);\n    }, [rate, title, body]);\n\n    // 取得に成功した楽曲データを保持する\n    const [trackData, setTrackData] = useState<TrackDataType>();\n    const saveTrackData = (obj: TrackDataType) => {\n        setTrackData(obj);\n    };\n\n    const [transAlert, setTransAlert] = useState<boolean>(true);\n    const passTransAlert = (bool: boolean) => {\n        setTransAlert(bool);\n    };\n\n    return (\n        <Box textAlign=\"left\" py=\"10px\">\n            {/* react-routeの「Prompt」によって、ページを離れようとしたときに警告\n            (投稿確定時のリダイレクトでは無効) */}\n            {transAlert && (\n                <Prompt message=\"ページを離れると入力した内容が失われます\" />\n            )}\n            <CreateBreadcrumb\n                step={step}\n                goTrackInfo={goTrackInfo}\n                goRate={goRate}\n                goCheck={goCheck}\n                isTrackNull={isTrackNull}\n                isRatesNull={isRatesNull}\n            />\n\n            {step === \"track\" ? (\n                <CreateTrackInfo\n                    goRate={goRate}\n                    onChangeTrackURL={onChangeTrackURL}\n                    trackUrl={trackUrl}\n                    trackId={trackId}\n                    setTrackId={changeTrackId}\n                    isTrackNull={isTrackNull}\n                    trackData={trackData}\n                    saveTrackData={saveTrackData}\n                />\n            ) : step === \"rate\" ? (\n                <CreateRate\n                    goCheck={goCheck}\n                    goTrackInfo={goTrackInfo}\n                    onChangeRate={onChangeRate}\n                    rate={rate}\n                    onChangeTitle={onChangeTitle}\n                    title={title}\n                    onChangeBody={onChangeBody}\n                    body={body}\n                    isRatesNull={isRatesNull}\n                />\n            ) : (\n                <CreateCheck\n                    rate={rate}\n                    title={title}\n                    body={body}\n                    trackData={trackData}\n                    trackId={trackId}\n                    goRate={goRate}\n                    setTransAlert={passTransAlert}\n                />\n            )}\n        </Box>\n    );\n});\n","import { Recent } from \"../components/pages/home/Recent\";\nimport { FollowPosts } from \"../components/pages/home/FollowPosts\";\nimport { Popular } from \"../components/pages/home/Popular\";\nimport { Detail404 } from \"../components/pages/home/detail/Detail404\";\nimport { PostDetail } from \"../components/pages/home/detail/PostDetail\";\nimport { Create } from \"../components/pages/Create\";\n\nexport const homeRoutes = [\n    {\n        path: \"\",\n        exact: true,\n        children: <Recent />,\n    },\n    {\n        path: \"follow_post\",\n        exact: false,\n        // children: <FollowPosts />,\n        children: <Recent />,\n    },\n    {\n        path: \"popular\",\n        exact: false,\n        // children: <Popular />,\n        children: <Recent />,\n    },\n    {\n        path: \"post/:id\",\n        exact: false,\n        children: <PostDetail />,\n    },\n    {\n        path: \"create_post\",\n        exact: false,\n        children: <Create />,\n    },\n    {\n        path: \"page404\",\n        exact: false,\n        children: <Detail404 />,\n    },\n    {\n        path: \"*\",\n        exact: false,\n        children: <Recent />,\n    },\n];\n","import { atom } from \"recoil\";\n\nexport const loginState = atom( {\n    key: \"loginState\",\n    default: { isLogin:true }\n} );\n","import { IconButton } from \"@chakra-ui/react\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { memo, VFC } from \"react\";\n\ntype Props = {\n    display?: {};\n    onClick: () => void;\n    size?: string;\n    ml?: string;\n    my?: string;\n};\n\nexport const HamburgerButton: VFC<Props> = memo((props) => {\n    const { display, onClick, ml = \"none\", my = \"none\", size = \"md\" } = props;\n    return (\n        <IconButton\n            bgGradient=\"linear(to-tl, green, #c4de71)\"\n            color=\"white\"\n            aria-label=\"Open menu\"\n            icon={<HamburgerIcon />}\n            _focus={{ outline: \"none\" }}\n            size={size}\n            ml={ml}\n            my={my}\n            display={display}\n            onClick={onClick}\n        />\n    );\n});\n","import { Text } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const HomePostTitle: VFC<Props> = (props) => {\n  const { children } = props;\n  return (\n    <Text\n      as=\"h1\"\n      color=\"gray.500\"\n      mr=\"auto\"\n      mt=\"8px\"\n      fontSize={{ base: \"18px\", md: \" 23px\" }}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { Flex, Box, IconButton } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { HamburgerButton } from \"../../atoms/button/HamburgerButton\";\nimport { homeState } from \"../../../store/homeState\";\nimport { HomePostTitle } from \"../../atoms/typography/HomePostTitle\";\nimport { useHistory } from \"react-router\";\n\ntype Props = {\n    children: ReactNode;\n    onOpen: () => void;\n};\n\nexport const HomePostBox: VFC<Props> = memo((props) => {\n    const { children, onOpen } = props;\n    const { topic } = useRecoilValue(homeState);\n    const history = useHistory();\n\n    const onBackHome = () => {\n        history.goBack();\n    };\n\n    return (\n        <Flex\n            w={{ base: \"100%\", md: \"80vh\" }}\n            h=\"100vh\"\n            borderX={{ base: \"none\", md: \"1px\" }}\n            borderColor={{ md: \"gray.200\" }}\n            flexDirection=\"column\"\n        >\n            {/* ヘッダー */}\n            <Flex\n                as=\"nav\"\n                w=\"100%\"\n                borderBottom=\"1px\"\n                borderColor=\"gray.200\"\n                // textAlign=\"left\"\n                px=\"3%\"\n            >\n                {/* ページタイトル */}\n                <Box my=\"1.5%\" h=\"5%\">\n                    {topic === \"recent\" ? (\n                        <HomePostTitle>最新の投稿</HomePostTitle>\n                    ) : topic === \"follow\" ? (\n                        <HomePostTitle>フォロー</HomePostTitle>\n                    ) : topic === \"popular\" ? (\n                        <HomePostTitle>人気の投稿</HomePostTitle>\n                    ) : topic === \"create\" ? (\n                        <HomePostTitle>投稿する</HomePostTitle>\n                    ) : (\n                        <Flex>\n                            <IconButton\n                                icon={<HiArrowNarrowLeft />}\n                                aria-label=\"Back home\"\n                                bg=\"none\"\n                                mr={2}\n                                fontSize=\"25px\"\n                                onClick={onBackHome}\n                                mt=\"auto\"\n                                boxSize={{ base: \"29px\", md: \"36px\" }}\n                            />\n                            <HomePostTitle>スレッド</HomePostTitle>\n                        </Flex>\n                    )}\n                </Box>\n                {/* メニューボタン（スマホサイズのときのみ出現） */}\n                <HamburgerButton\n                    display={{ base: \"inline\", md: \"none\" }}\n                    onClick={onOpen}\n                    ml=\"auto\"\n                    my=\"auto\"\n                    size=\"sm\"\n                />\n            </Flex>\n            {/* 投稿一覧部分 */}\n            <Box\n                h=\"100vh\"\n                w=\"100%\"\n                overflow=\"auto\"\n                flexDirection=\"column\"\n                align=\"center\"\n                pt=\"2%\"\n                px={5}\n            >\n                {children}\n            </Box>\n        </Flex>\n    );\n});\n","import { Button } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    w?: string;\n    onClick: () => void;\n    disabled?: boolean;\n};\n\nexport const MenuButton: VFC<Props> = memo((props) => {\n    const { children, w = \"md\", onClick, disabled = false } = props;\n    return (\n        <Button\n            colorScheme=\"gray\"\n            variant=\"ghost\"\n            solid=\"none\"\n            w=\"w\"\n            _hover={{ cursor: \"pointer\" }}\n            _focus={{ boxShadow: \"none\", outline: \"none\" }}\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </Button>\n    );\n});\n","import { Button } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    w?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n    mt?: string;\n};\n\nexport const PrimaryButton: VFC<Props> = (props) => {\n    const { children, w = \"100%\", onClick, disabled, mt = \"none\" } = props;\n    return (\n        <Button\n            onClick={onClick}\n            color=\"white\"\n            bgGradient=\"linear(to-tl, green, #c4de71)\"\n            _focus={{ outline: \"none\" }}\n            _hover={{ opacity: 0.8, cursor: \"pointer\" }}\n            disabled={disabled}\n            w={w}\n            mt={mt}\n        >\n            {children}\n        </Button>\n    );\n};\n","import { memo, useEffect, VFC } from \"react\";\nimport { Box, Button, Flex, Text } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router\";\n\nimport { useLogout } from \"../../hooks/login/useLogout\";\nimport { MenuButton } from \"../atoms/button/MenuButton\";\nimport { PrimaryButton } from \"../atoms/button/PrimaryButton\";\nimport { UserInfoBox } from \"./UserInfoBox\";\nimport { useRecoilValue } from \"recoil\";\nimport { meState } from \"../../store/meState\";\n\ntype Props = {\n    onClose?: () => void | undefined;\n};\n\nexport const MenuContents: VFC<Props> = memo((props) => {\n    const { onClose } = props;\n\n    const history = useHistory();\n    // ユーザーの情報を取得\n    const me = useRecoilValue(meState);\n    const { logout } = useLogout();\n\n    // 画面遷移(＋Drawerが開いてたら閉める)\n    const transTo = (\n        path: \"/\" | \"/follow_post\" | \"/popular\" | \"/create_post\"\n    ) => {\n        history.push(path);\n        onClose !== undefined && onClose();\n    };\n\n    const onRecent = () => {\n        transTo(\"/\");\n    };\n    const onFollowPost = () => {\n        transTo(\"/follow_post\");\n    };\n    const onPopular = () => {\n        transTo(\"/popular\");\n    };\n    const onCreate = () => {\n        transTo(\"/create_post\");\n    };\n\n    const onClickLogout = () => {\n        logout();\n    };\n\n    return (\n        <Flex h=\"100vh\" textAlign=\"right\" flexDirection=\"column\">\n            <Box mr=\"auto\" my=\"20px\">\n                <Text\n                    as=\"h1\"\n                    fontSize=\"40px\"\n                    bgGradient=\"linear(to-tl, green, #c4de71)\"\n                    bgClip=\"text\"\n                    fontWeight=\"bold\"\n                    onClick={onRecent}\n                    cursor=\"pointer\"\n                >\n                    Bebop!\n                </Text>\n            </Box>\n            <Flex flexFlow=\"column\" alignItems=\"start\">\n                <MenuButton onClick={onRecent}>最新の投稿</MenuButton>\n                <MenuButton onClick={onFollowPost} disabled={true}>\n                    フォロー(準備中)\n                </MenuButton>\n                <MenuButton onClick={onPopular} disabled={true}>\n                    人気の投稿(準備中)\n                </MenuButton>\n            </Flex>\n            <Box mt=\"auto\" mx=\"auto\">\n                <PrimaryButton w=\"130px\" onClick={onCreate}>\n                    投稿\n                </PrimaryButton>\n            </Box>\n            <Box mt=\"auto\" mb=\"15%\" textAlign=\"left\">\n                <UserInfoBox img=\"\" name={me.name} user_title=\"\" pl=\"30px\" />\n                <Button\n                    fontSize={{ sm: \"10px\", base: \"5px\" }}\n                    w=\"auto\"\n                    h=\"40%\"\n                    colorScheme=\"red\"\n                    mt=\"5px\"\n                    _focus={{ outline: \"none\" }}\n                    onClick={onClickLogout}\n                >\n                    ログアウト\n                </Button>\n            </Box>\n        </Flex>\n    );\n});\n","import axios from \"axios\";\nimport { useCallback, useState } from \"react\"\nimport { useHistory } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport apiClient from \"../../client/apiClient\";\nimport { loginState } from \"../../store/loginState\";\nimport { useMessage} from \"../message/useMessage\";\n\n\nexport const useLogout = () => {\n    const { showMessage } = useMessage();\n    const history = useHistory();\n    const setIsLogin = useSetRecoilState( loginState );\n\n    const logout = useCallback( ( ) =>\n    {\n        axios.post( \"api/logout\" )\n            .then( res =>\n            {\n                localStorage.removeItem( \"auth\" );\n                setIsLogin( { isLogin:false});\n                history.push( \"/login\" );\n                showMessage( { title: \"ログアウトしました\", status: \"success\" } );\n            } ).catch( res =>\n            {\n                showMessage( { title: \"ログアウトに失敗しました\", status: \"error\" } );\n            })\n    }, [] );\n    return { logout };\n}\n","import { memo, VFC } from \"react\";\nimport {\n    Drawer,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerBody,\n} from \"@chakra-ui/react\";\nimport { MenuContents } from \"../../molecules/MenuContents\";\n\ntype Props = {\n    onClose: () => void;\n    isOpen: boolean;\n};\n\nexport const MenuDrawer: VFC<Props> = memo((props) => {\n    const { onClose, isOpen } = props;\n    return (\n        <Drawer placement=\"left\" size=\"xs\" onClose={onClose} isOpen={isOpen}>\n            <DrawerOverlay>\n                <DrawerContent>\n                    <DrawerBody pl=\"20px\" bg=\"gray.100\">\n                        <MenuContents onClose={onClose} />\n                    </DrawerBody>\n                </DrawerContent>\n            </DrawerOverlay>\n        </Drawer>\n    );\n});\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\nimport { MenuContents } from \"../../molecules/MenuContents\";\nimport { MenuDrawer } from \"./MenuDrawer\";\n\ntype Props = {\n    children: ReactNode;\n    isOpen: boolean;\n    onClose: () => void;\n};\n\nexport const MenuBar: VFC<Props> = memo((props) => {\n    const { children, isOpen, onClose } = props;\n\n    return (\n        <Box>\n            {/* メニューバー */}\n            <Flex mx=\"auto\" w=\"100%\" justifyContent=\"center\">\n                <Box h=\"100vh\" pr=\"3%\" display={{ base: \"none\", md: \"inline\" }}>\n                    <MenuContents />\n                </Box>\n                {children}\n            </Flex>\n            <MenuDrawer isOpen={isOpen} onClose={onClose} />\n        </Box>\n    );\n});\n","import { Box, useDisclosure } from \"@chakra-ui/react\";\nimport { memo, ReactNode, useEffect, VFC } from \"react\";\nimport { useGetMe } from \"../../hooks/api/useGetMe\";\n\nimport { HomePostBox } from \"../organisms/home/HomePostBox\";\nimport { MenuBar } from \"../organisms/home/MenuBar\";\n\ntype Props = {\n    children: ReactNode;\n};\n\nexport const HomeLayout: VFC<Props> = memo((props) => {\n    const { children } = props;\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    // ログインしたユーザーの情報を取得してグローバルStateで保持\n    const { getMe } = useGetMe();\n    useEffect(() => getMe(), [getMe]);\n\n    return (\n        <Box w=\"100%\">\n            <MenuBar isOpen={isOpen} onClose={onClose}>\n                <HomePostBox onOpen={onOpen}>{children}</HomePostBox>\n            </MenuBar>\n        </Box>\n    );\n});\n","import { useCallback } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport apiClient from \"../../client/apiClient\";\nimport { loginState } from \"../../store/loginState\";\nimport { meState} from \"../../store/meState\"\n\ntype Me = {\n    id: string;\n    name: string;\n    email: string;\n}\n\nexport const useGetMe = () =>\n{\n    const setIsLogin = useSetRecoilState( loginState );\n    const setMe = useSetRecoilState( meState );\n\n    // ユーザーの情報を取得できない＝ログインしていないとみなし、\n    // その場合はログイン状態管理（isLogin）がfalseとなる\n    const getMe = useCallback(() => {\n        apiClient\n            .get<Me>(`/api/me`)\n            .then( ( res ) =>\n            {\n                setMe( res.data );\n                setIsLogin( { isLogin:true});\n            }\n            )\n            .catch( () =>\n            {\n                setMe( {id:\"1\", name:\"ああ\", email:\"aaa\"} );\n                setIsLogin( { isLogin:false});\n            })\n    }, []);\n\n    return { getMe };\n};\n","export const Page404 = () => {\n  return <h1>Page404</h1>;\n};\n","import axios from \"axios\";\nimport { useCallback, useState } from \"react\"\nimport { useHistory } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport apiClient from \"../../client/apiClient\";\nimport { loginState } from \"../../store/loginState\";\nimport { useMessage} from \"../message/useMessage\";\n\n\nexport const useLogin = () => {\n    const { showMessage } = useMessage();\n    const history = useHistory();\n\n    const [ user, setUser ] = useState();\n    const setIsLogin = useSetRecoilState( loginState );\n\n    const login = useCallback( (mail: string, password: string ) =>\n    {\n        apiClient.get( 'sanctum/csrf-cookie')\n            .then( res =>\n            {\n                apiClient.post( \"/api/login\", {\n                    email: mail,\n                    password: password\n                })\n                    .then( res =>\n                    {\n                        showMessage( { title: \"ログインしました\", status: \"success\" } );\n                        setIsLogin( { isLogin:true});\n                        history.push( \"/\" );\n                    } ).catch( error =>\n                    {\n                        showMessage( { title: \"ユーザーが見つかりません\", status: \"error\" } );\n                    })\n            })\n    }, [] );\n    return { login };\n}\n","import { Box, Text, Input } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    value: string;\n    inputType?: string;\n    fontSize?: string | { md?: string; sm?: string; base?: string };\n    fontWeight?: string;\n};\n\nexport const Form: VFC<Props> = (props) => {\n    const {\n        onChange,\n        value,\n        children,\n        inputType = \"text\",\n        fontSize = \"sm\",\n        fontWeight = \"normal\",\n    } = props;\n\n    return (\n        <Box textAlign=\"start\" w=\"100%\">\n            <Text\n                ml={1}\n                mb={1}\n                fontSize={fontSize}\n                fontWeight={fontWeight}\n                color=\"gray.700\"\n            >\n                {children}\n            </Text>\n            <Input type={inputType} onChange={onChange} value={value} />\n        </Box>\n    );\n};\n","import {\n    Tabs,\n    Text,\n    Box,\n    Flex,\n    Tab,\n    TabList,\n    TabPanels,\n    TabPanel,\n} from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router\";\nimport { ChangeEvent, useState } from \"react\";\n\nimport { useLogin } from \"../../hooks/login/useLogin\";\nimport { Form } from \"../molecules/Form\";\nimport { PrimaryButton } from \"../atoms/button/PrimaryButton\";\nimport { useRegister } from \"../../hooks/login/useRegister\";\n\nexport const Login = () => {\n    // ログインフォーム用state\n    const [loginMailAddress, setLoginMailAddress] = useState(\"\");\n    const [loginPassword, setLoginPassword] = useState(\"\");\n    // 新規登録フォーム用state\n    const [regMailAddress, setRegMailAddress] = useState(\"\");\n    const [regPassword, setRegPassword] = useState(\"\");\n    const [regPasswordConfirm, setRegPasswordConfirm] = useState(\"\");\n    const [regName, setRegName] = useState(\"\");\n\n    // ログインフォーム入力関数\n    const onChangeLoginMailAddress = (e: ChangeEvent<HTMLInputElement>) =>\n        setLoginMailAddress(e.target.value);\n\n    const onChangeLoginPassword = (e: ChangeEvent<HTMLInputElement>) =>\n        setLoginPassword(e.target.value);\n\n    // ログインフォーム入力関数\n    const onChangeRegMailAddress = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegMailAddress(e.target.value);\n\n    const onChangeRegPassword = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegPassword(e.target.value);\n\n    const onChangeRegPasswordConfirm = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegPasswordConfirm(e.target.value);\n\n    const onChangeRegName = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegName(e.target.value);\n\n    const { register } = useRegister();\n    const onClickRegister = () => {\n        register(regName, regMailAddress, regPassword);\n    };\n\n    const { login } = useLogin();\n    const onClickLogin = () => {\n        login(loginMailAddress, loginPassword);\n    };\n\n    return (\n        <Box\n            w=\"100%\"\n            h=\"100vh\"\n            textAlign=\"center\"\n            pt={{ base: \"none\", sm: \"10vh\" }}\n        >\n            {/* 画面サイズが大きいときはカードの外に「Bebop！を表示」 */}\n            <Text\n                display={{ base: \"none\", sm: \"inline\" }}\n                as=\"h1\"\n                fontSize=\"60px\"\n                bgGradient=\"linear(to-tl, green, #c4de71)\"\n                bgClip=\"text\"\n                fontWeight=\"bold\"\n            >\n                Bebop!\n            </Text>\n            {/* 以下、カード内 */}\n            <Flex\n                bg=\"white\"\n                borderRadius={{ base: \"none\", sm: \"10px\" }}\n                p=\"20px\"\n                shadow={{ base: \"none\", sm: \"md\" }}\n                w={{ base: \"100%\", sm: \"400px\" }}\n                h={{ base: \"100%\", sm: \"500px\" }}\n                textAlign=\"center\"\n                flexDirection=\"column\"\n                mx=\"auto\"\n                mt={{ base: \"none\", sm: \"2vh\" }}\n            >\n                <Text\n                    display={{ base: \"inline\", sm: \"none\" }}\n                    as=\"h1\"\n                    fontSize=\"40px\"\n                    bgGradient=\"linear(to-tl, green, #c4de71)\"\n                    bgClip=\"text\"\n                    fontWeight=\"bold\"\n                    mb=\"20px\"\n                >\n                    Bebop!\n                </Text>\n                {/* タブを作成 */}\n                <Tabs isFitted variant=\"enclosed\">\n                    <TabList mb=\"1em\">\n                        <Tab\n                            _selected={{ color: \"white\", bg: \"green.400\" }}\n                            _focus={{ outline: \"none\" }}\n                            fontWeight=\"bold\"\n                        >\n                            ログイン\n                        </Tab>\n                        <Tab\n                            _selected={{ color: \"white\", bg: \"green.400\" }}\n                            _focus={{ outline: \"none\" }}\n                            fontWeight=\"bold\"\n                        >\n                            新規登録\n                        </Tab>\n                    </TabList>\n\n                    {/* タブの中身を記述 */}\n                    <TabPanels>\n                        {/* ログイン用タブパネル */}\n                        <TabPanel>\n                            <Flex flexDirection=\"column\" w=\"100%\" h=\"100%\">\n                                <Form\n                                    onChange={onChangeLoginMailAddress}\n                                    value={loginMailAddress}\n                                    inputType=\"email\"\n                                >\n                                    メールアドレス\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeLoginPassword}\n                                    value={loginPassword}\n                                    inputType=\"password\"\n                                >\n                                    パスワード\n                                </Form>\n                                <Box h=\"10px\" />\n                                <PrimaryButton\n                                    onClick={onClickLogin}\n                                    disabled={\n                                        loginMailAddress === \"\" ||\n                                        loginPassword === \"\"\n                                    }\n                                    mt=\"15px\"\n                                >\n                                    ログイン\n                                </PrimaryButton>\n                            </Flex>\n                        </TabPanel>\n                        {/* 新規登録用タブパネル */}\n                        <TabPanel>\n                            <Flex flexDirection=\"column\" w=\"100%\" h=\"100%\">\n                                <Form\n                                    onChange={onChangeRegName}\n                                    value={regName}\n                                >\n                                    ユーザー名（10字以内）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegMailAddress}\n                                    value={regMailAddress}\n                                    inputType=\"email\"\n                                >\n                                    メールアドレス\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegPassword}\n                                    value={regPassword}\n                                    inputType=\"password\"\n                                >\n                                    パスワード（6~10字）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegPasswordConfirm}\n                                    value={regPasswordConfirm}\n                                    inputType=\"password\"\n                                >\n                                    パスワード（再入力）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <PrimaryButton\n                                    onClick={onClickRegister}\n                                    disabled={\n                                        regMailAddress === \"\" ||\n                                        regPassword === \"\" ||\n                                        regPasswordConfirm === \"\" ||\n                                        regPassword !== regPasswordConfirm ||\n                                        regName === \"\"\n                                    }\n                                    mt=\"15px\"\n                                >\n                                    新規登録\n                                </PrimaryButton>\n                            </Flex>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </Flex>\n        </Box>\n    );\n};\n","import axios from \"axios\";\nimport { useCallback } from \"react\"\nimport { useMessage} from \"../message/useMessage\";\nimport { useLogin } from \"./useLogin\";\n\n\nexport const useRegister = () => {\n    const { showMessage } = useMessage();\n    const { login } = useLogin();\n\n\n\n    const register = useCallback( (name:string, mail: string, password: string ) =>\n    {\n        const data = {\n            name: name,\n            email: mail,\n            password: password\n        }\n\n        axios.post( \"api/register\", data )\n            .then( ( res ) =>\n            {\n                if ( res.status == 200 )\n                {\n                    login(mail,password)\n                }\n            } )\n            .catch(  () =>\n            {\n                showMessage( { title: \"新規登録に失敗しました\", status: \"error\" } );\n            })\n    }, [] );\n    return {  register };\n}\n","import { memo, ReactNode, VFC } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\nimport { loginState } from \"../../store/loginState\";\n\ntype Props = {\n    children: ReactNode;\n};\n\nexport const AuthGuard: VFC<Props> = memo((props) => {\n    const { children } = props;\n    const { isLogin } = useRecoilValue(loginState);\n\n    return isLogin ? <>{children}</> : <Redirect to=\"/login\" />;\n});\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { homeRoutes } from \"./HomeRoutes\";\nimport { HomeLayout } from \"../components/templates/HomeLayout\";\nimport { Page404 } from \"../components/pages/Page404\";\nimport { Login } from \"../components/pages/Login\";\nimport { loginState } from \"../store/loginState\";\nimport { AuthGuard } from \"./auth_route/AuthGuard\";\n\nexport const Router = () => {\n    const { isLogin } = useRecoilValue(loginState);\n    return (\n        <Switch>\n            <Route exact path=\"/login\">\n                {/* ログイン済の場合はトップページにリダイレクトされる */}\n                {isLogin ? <Redirect to=\"/\" /> : <Login />}\n            </Route>\n            {/* 未ログインの場合は「AuthGuard」によってログイン画面へリダイレクトされる */}\n            <AuthGuard>\n                <HomeLayout>\n                    <Switch>\n                        <Route\n                            path=\"/\"\n                            render={({ match: { url } }) => (\n                                <Switch>\n                                    {homeRoutes.map((route) => (\n                                        <Route\n                                            key={route.path}\n                                            exact={route.exact}\n                                            path={`${url}${route.path}`}\n                                        >\n                                            {route.children}\n                                        </Route>\n                                    ))}\n                                </Switch>\n                            )}\n                        />\n                    </Switch>\n                </HomeLayout>\n            </AuthGuard>\n            <Route path=\"*\">\n                <Page404 />\n            </Route>\n        </Switch>\n    );\n};\n","import \"./App.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport theme from \"./theme/theme\";\nimport { Router } from \"./router/Router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      <BrowserRouter>\n        <RecoilRoot>\n          <ChakraProvider theme={theme}>\n            <Router />\n          </ChakraProvider>\n        </RecoilRoot>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}