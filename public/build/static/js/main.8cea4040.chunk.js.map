{"version":3,"sources":["theme/theme.ts","store/homeState.ts","components/atoms/typography/ShortText.tsx","components/molecules/postCard/CardMusicBox.tsx","components/molecules/postCard/CardComment.tsx","components/atoms/button/Rating.tsx","store/meState.ts","client/apiClient.ts","components/atoms/color/gradationGreen.ts","components/molecules/Form.tsx","components/organisms/ProfileModal.tsx","hooks/api/useGetUser.ts","components/molecules/UserInfoBox.tsx","components/atoms/frame/CardFrame.tsx","components/atoms/button/LikeButton.tsx","components/atoms/button/ShareButton.tsx","components/atoms/button/CommentButton.tsx","components/molecules/postCard/CardReactionButtons.tsx","components/organisms/posts/LgPostCard.tsx","components/organisms/LoadingPageSpinner.tsx","components/atoms/button/SmRating.tsx","components/organisms/posts/SmPostCard.tsx","components/pages/posts/Recent.tsx","hooks/api/useGetPosts.ts","components/organisms/MusicDetailBox.tsx","components/molecules/detail/ReactionButtons.tsx","components/organisms/detail/DetailBox.tsx","components/pages/Detail.tsx","hooks/api/useGetDetail.ts","components/molecules/create/CreateBreadcrumb.tsx","components/atoms/button/CreateTransButton.tsx","hooks/message/useMessage.ts","components/organisms/create/CreateTrackInfo.tsx","hooks/api/useGetTrack.ts","hooks/useValidateTrackURL.ts","components/atoms/button/StarButton.tsx","components/molecules/create/FiveStarButton.tsx","components/organisms/create/CreateRate.tsx","components/organisms/create/CreateCheck.tsx","hooks/api/usePostCreate.ts","components/pages/Create.tsx","components/organisms/base/Alert404.tsx","components/pages/Page404.tsx","router/HomeRoutes.tsx","store/loginState.ts","hooks/api/useGetMe.ts","components/atoms/button/HamburgerButton.tsx","components/atoms/typography/HomePostTitle.tsx","components/organisms/base/HomePostBox.tsx","components/atoms/button/MenuButton.tsx","components/atoms/button/PrimaryButton.tsx","components/molecules/MenuContents.tsx","hooks/login/useLogout.ts","components/organisms/base/MenuDrawer.tsx","components/organisms/base/MenuBar.tsx","components/templates/BaseLayout.tsx","hooks/login/useLogin.ts","components/pages/Login.tsx","hooks/login/useRegister.ts","router/auth_route/AuthGuard.tsx","router/Router.tsx","App.tsx","index.tsx"],"names":["theme","extendTheme","styles","global","body","backgroundColor","color","components","Button","baseStyle","_focus","outline","Text","homeState","atom","key","default","topic","ShortText","props","children","fontSize","mb","fontWeight","w","overflow","textOverflow","whiteSpace","CardMusicBox","img","title","artist","flexFlow","sm","base","h","boxSize","my","mx","mt","src","shadow","CardComment","memo","py","pl","Rating","rating","isRateDisable","starSize","gap","fixedRating","toString","length","map","value","ml","pt","meState","id","undefined","name","email","job","image","apiClient","axios","create","baseURL","withCredentials","gradationGreen","Form","onChange","inputType","readOnly","textAlign","type","ProfileModal","isOpen","onClose","me","useRecoilValue","useState","user","setUser","getUser","useCallback","get","then","res","data","catch","useGetUser","setName","setJob","setBody","setReadOnly","canFollow","setCanFollow","update","setUpdate","useEffect","console","log","borderRadius","bgGradient","boxShadow","bg","size","colorScheme","display","e","target","resize","onClick","mr","UserInfoBox","m","useDisclosure","onOpen","cursor","_hover","flexDirection","alignItems","CardFrame","px","opacity","LikeButton","icon","ShareButton","CommentButton","CardReactionButtons","comment_val","like_val","LgPostCard","post","track","review","reaction","history","useHistory","position","push","pb","star","LoadingPageSpinner","thickness","speed","emptyColor","SmRating","SmPostCard","Recent","useSetRecoilState","setTopic","sort","api_posts","setApiPosts","loading","setLoading","getPosts","finally","useGetPosts","obj","Object","assign","MusicDetailBox","album","release","ratio","frameBorder","allow","content","MusicDetailTopics","ReactionButtons","justifyContent","DetailBox","userName","userTitle","userImg","userId","commentVal","likeVal","pr","PostDetail","failed","api_postDetail","setApiPostDetail","getPostDetail","useGetDetail","useParams","orientation","CreateBreadcrumb","step","goTrackInfo","goRate","goCheck","isTrackNull","isRatesNull","trackColor","setTrackColor","rateColor","setRateColor","checkColor","setCheckColor","trackWeight","setTrackWeight","rateWeight","setRateWeight","checkWeight","setCheckWeight","canMoveRate","canMoveCheck","spacing","separator","ChevronRight","isCurrentPage","pointerEvents","CreateTransButton","isDisabled","text","useMessage","toast","useToast","showMessage","status","duration","isClosable","CreateTrackInfo","onChangeTrackURL","trackUrl","trackId","setTrackId","trackData","saveTrackData","getTrack","saveTrack","useGetTrack","validateTrackURL","head","foot","url","regexHead","test","regexFoot","result","match","useValidateTrackURL","onceTrack","setOnceTrack","saveOnceTrackData","val","validatedTrackId","StarButton","num","rate","setRate","StarSize","useBreakpointValue","starGap","zIndex","style","height","width","FiveStarButton","toFixed","CreateRate","onChangeRate","onChangeTitle","onChangeBody","CreateCheck","setTransAlert","postCreate","usePostCreate","Create","setStep","setTrackUrl","setTitle","setIsTrackNull","setIsRatesNull","setTrackData","transAlert","message","bool","Alert404","variant","maxWidth","Page404","homeRoutes","path","exact","loginState","isLogin","useGetMe","setIsLogin","setMe","getMe","HamburgerButton","Hamburger","HomePostTitle","as","md","HomePostBox","borderX","borderColor","borderBottom","goBack","align","MenuButton","disabled","solid","PrimaryButton","MenuContents","logout","localStorage","removeItem","useLogout","transTo","onRecent","bgClip","MenuDrawer","placement","MenuBar","BaseLayout","useLogin","login","mail","password","error","Login","loginMailAddress","setLoginMailAddress","loginPassword","setLoginPassword","regMailAddress","setRegMailAddress","regPassword","setRegPassword","regPasswordConfirm","setRegPasswordConfirm","regName","setRegName","register","useRegister","p","isFitted","_selected","AuthGuard","to","Router","render","route","App","className","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cea4040.chunk.js","sourcesContent":["import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        backgroundColor: \"gray.50\",\n        color: \"gray.800\"\n      }\n    },\n    components: {\n      Button: {\n        baseStyle: {\n          _focus: { outline: \"none\" }\n        }\n      },\n      Text: {\n        baseStyle: {\n          color:\"gray.700\"\n        }\n      }\n    }\n  }\n});\nexport default theme;\n","import { atom } from \"recoil\";\n\nexport const homeState = atom( {\n    key: \"homeState\",\n    default: { topic:\"recent\" }\n} );\n","import { ReactNode, VFC } from \"react\";\nimport { Text } from \"@chakra-ui/react\";\n\ntype Props = {\n    children: ReactNode;\n    fontSize?:\n        | string\n        | {\n              sm?: string;\n              md?: string;\n              base?: string;\n          };\n    fontWeight?: \"bold\" | \"normal\";\n    mb?: string;\n    w?: string;\n    color?: string;\n};\n\nexport const ShortText: VFC<Props> = (props) => {\n    const { children, fontSize, mb, fontWeight = \"normal\", w, color } = props;\n    return (\n        // 親要素をはみ出さない一行のテキスト\n        <Text\n            overflow=\"hidden\"\n            textOverflow=\"ellipsis\"\n            whiteSpace=\"nowrap\"\n            fontSize={fontSize}\n            fontWeight={fontWeight}\n            mb={mb}\n            w={w}\n            color={color}\n        >\n            {children}\n        </Text>\n    );\n};\n","import { Flex, Image, Box } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { ShortText } from \"../../atoms/typography/ShortText\";\n\ntype Props = {\n    img: string;\n    title: string;\n    artist: string;\n};\n\nexport const CardMusicBox: VFC<Props> = (props) => {\n    const { img, title, artist } = props;\n\n    return (\n        <Flex\n            flexFlow=\"column\"\n            w={{ sm: \"28%\", base: \"100%\" }}\n            h={{ sm: \"100%\", base: \"42%\" }}\n        >\n            <Box\n                boxSize={{ sm: \"85%\", base: \"25vh\" }}\n                my=\"auto\"\n                mx={{ sm: \"none\", base: \"auto\" }}\n                mt={{ sm: \"20%\", base: \"none\" }}\n            >\n                <Image src={img} mt=\"15%\" shadow=\"5px 5px #EEE\" />\n                <Box mt=\"5%\">\n                    <ShortText fontSize=\"lg\" fontWeight=\"bold\">\n                        {title}\n                    </ShortText>\n                    <ShortText fontSize=\"sm\">{artist}</ShortText>\n                </Box>\n            </Box>\n        </Flex>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\nimport { ShortText } from \"../../atoms/typography/ShortText\";\n\ntype Props = {\n    title: string;\n    body: string;\n};\n\nexport const CardComment: VFC<Props> = memo((props) => {\n    const { title, body } = props;\n\n    return (\n        <Box\n            h={{ sm: \"19vh\", base: \"32vh\" }}\n            w=\"100%\"\n            py=\"1%\"\n            pl=\"4%\"\n            my=\"auto\"\n            overflow=\"hidden\"\n        >\n            <ShortText\n                fontSize={{ sm: \"20px\", base: \"18px\" }}\n                fontWeight=\"bold\"\n            >\n                {title}\n            </ShortText>\n            <Text fontSize={{ sm: \"md\", base: \"15px\" }} mt=\"2%\">\n                {body}\n            </Text>\n        </Box>\n    );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { memo, VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\n\ntype Props = {\n    rating: number;\n    isRateDisable?: boolean;\n};\n\nexport const Rating: VFC<Props> = memo((props) => {\n    const { rating, isRateDisable = false } = props;\n    const starSize = \"23px\";\n    const gap = \"1px\";\n\n    let fixedRating = rating.toString();\n    if (fixedRating.length === 1) {\n        fixedRating = fixedRating + \".0\";\n    }\n\n    return (\n        <Flex>\n            {[1, 2, 3, 4, 5].map((value) =>\n                rating >= value ? (\n                    <Box mx={gap} key={value}>\n                        <BsStarFill fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : rating >= value - 0.5 ? (\n                    <Box mx={gap} key={value}>\n                        <BsStarHalf fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : (\n                    <Box mx={gap} key={value}>\n                        <BsStar fontSize={starSize} color=\"orange\" />\n                    </Box>\n                )\n            )}\n            {isRateDisable || (\n                <Text ml=\"10px\" pt=\"2px\" fontWeight=\"semibold\" color=\"gray.600\">\n                    {fixedRating}\n                </Text>\n            )}\n        </Flex>\n    );\n});\n","import { atom } from \"recoil\";\nimport { UserData } from \"../type/api/UserDataType\";\n\nexport const meState = atom<UserData>( {\n    key: \"meState\",\n    default: { id:undefined, name:undefined, email:undefined, job:undefined, image: undefined, body: undefined }\n} );\n","import axios from 'axios';\n\nconst apiClient = axios.create({\n    baseURL: '',\n    withCredentials: true,\n});\n\nexport default apiClient;\n","export const gradationGreen = \"linear(to-tl, green, #c4de71)\"\n","import { Box, Text, Input } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    value: string | undefined;\n    inputType?: string;\n    fontSize?: string | { md?: string; sm?: string; base?: string };\n    fontWeight?: string;\n    readOnly?: boolean;\n};\n\nexport const Form: VFC<Props> = (props) => {\n    const {\n        onChange,\n        value,\n        children,\n        inputType = \"text\",\n        fontSize = \"sm\",\n        fontWeight = \"normal\",\n        readOnly = false,\n    } = props;\n\n    return (\n        <Box textAlign=\"start\" w=\"100%\">\n            <Text\n                ml={1}\n                mb={1}\n                fontSize={fontSize}\n                fontWeight={fontWeight}\n                color=\"gray.700\"\n            >\n                {children}\n            </Text>\n            <Input\n                type={inputType}\n                onChange={onChange}\n                value={value}\n                readOnly={readOnly}\n            />\n        </Box>\n    );\n};\n","import { ChangeEvent, useEffect, useState, VFC } from \"react\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Button,\n    Flex,\n    Avatar,\n    Text,\n    Box,\n    Textarea,\n} from \"@chakra-ui/react\";\nimport { useRecoilValue } from \"recoil\";\nimport { meState } from \"../../store/meState\";\nimport { useGetUser } from \"../../hooks/api/useGetUser\";\nimport { UserData } from \"../../type/api/UserDataType\";\nimport { gradationGreen } from \"../atoms/color/gradationGreen\";\nimport { Form } from \"../molecules/Form\";\n\n// 親コンポーネントからはidのみを受け取り、modalコンポーネント内でuser情報をリクエストする\ntype Props = {\n    isOpen: boolean;\n    onClose: () => void;\n    id: string | undefined;\n};\n\nexport const ProfileModal: VFC<Props> = (props) => {\n    const { isOpen, onClose, id } = props;\n    const me = useRecoilValue(meState);\n\n    // 取得したいユーザー情報が自身のもの以外の場合のhooks\n    const { getUser, user } = useGetUser();\n\n    // profileオブジェクトからstateに割り振り、書き換えを可能とする（imageに関しては、一旦直接使用）\n    const [name, setName] = useState<string | undefined>();\n    const [job, setJob] = useState<string | undefined>();\n    const [body, setBody] = useState<string | undefined>();\n\n    // フォローボタンの表示、フォームの書き換え、更新ボタンの表示を管理\n    const [readOnly, setReadOnly] = useState<boolean>();\n    const [canFollow, setCanFollow] = useState<\"none\" | \"inline\">();\n    const [update, setUpdate] = useState<\"none\" | \"inline\">();\n\n    // もし、親コンポーネントから受け取ったidがログインしているユーザーのidと同じ場合は、\n    // リクエストを行わずにグローバルstateから参照し、プロフィールの編集を許可する\n    useEffect(() => {\n        {\n            if (me.id === id) {\n                // グローバル変数のmeを展開\n                setName(me.name);\n                setJob(me.job);\n                setBody(me.body);\n                // 書き換え可、フォローボタン非表示、更新ボタン表示\n                setReadOnly(false);\n                setCanFollow(\"none\");\n                setUpdate(\"inline\");\n            } else {\n                // getUser(id)による戻り値を展開\n                getUser(id);\n                // 書き換え不可、フォローボタン表示、更新ボタン非表示\n                setReadOnly(true);\n                setCanFollow(\"inline\");\n                setUpdate(\"none\");\n            }\n            console.log(id);\n            console.log(name);\n            console.log(job);\n            console.log(body);\n        }\n    }, []);\n\n    // profileの取得が終了し次第、stateの変更を行う\n    useEffect(() => {\n        if (user) {\n            setName(user.name);\n            setJob(user.job);\n            setBody(user.body);\n        }\n    }, [user]);\n\n    // 書き換え処理\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) =>\n        setName(e.target.value);\n    const onChangeJob = (e: ChangeEvent<HTMLInputElement>) =>\n        setJob(e.target.value);\n    const onChangeBody = (e: ChangeEvent<HTMLTextAreaElement>) =>\n        setBody(e.target.value);\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose}>\n            <ModalOverlay />\n            <ModalContent h=\"600px\" borderRadius=\"20px\">\n                <ModalHeader\n                    mx=\"auto\"\n                    textAlign=\"center\"\n                    w=\"100%\"\n                    bgGradient={gradationGreen}\n                    py=\"15px\"\n                    borderRadius=\"20px 20px 0 0\"\n                    boxShadow=\"xs\"\n                >\n                    <Flex h=\"130px\">\n                        {/* ユーザーアイコン＋フォローボタン */}\n                        <Box w=\"140px\" my=\"auto\">\n                            <Avatar bg=\"gray.400\" size=\"xl\" src={\"\"} mb=\"5px\" />\n                            <Button\n                                size=\"xs\"\n                                colorScheme=\"whiteAlpha\"\n                                display={canFollow}\n                            >\n                                フォローする\n                            </Button>\n                        </Box>\n                        {/* フォロー関係の値表示部分 */}\n                        <Flex my=\"auto\">\n                            <Box ml=\"30px\" mt=\"10px\">\n                                <Text color=\"white\" fontSize=\"25px\">\n                                    999\n                                </Text>\n                                <Text color=\"white\" fontSize=\"20px\">\n                                    follows\n                                </Text>\n                            </Box>\n                            <Box ml=\"60px\" mt=\"10px\">\n                                <Text color=\"white\" fontSize=\"25px\">\n                                    999\n                                </Text>\n                                <Text color=\"white\" fontSize=\"20px\">\n                                    follower\n                                </Text>\n                            </Box>\n                        </Flex>\n                    </Flex>\n                </ModalHeader>\n                {/* 各プロフィール情報 */}\n                <ModalBody>\n                    <Box h=\"10px\" />\n                    <Form\n                        value={name}\n                        fontWeight=\"semibold\"\n                        onChange={onChangeName}\n                        readOnly={readOnly}\n                    >\n                        名前\n                    </Form>\n                    <Box h=\"20px\" />\n                    <Form\n                        value={job}\n                        fontWeight=\"semibold\"\n                        onChange={onChangeJob}\n                        readOnly={readOnly}\n                    >\n                        職業・肩書\n                    </Form>\n                    <Box h=\"20px\" />\n                    <Box>\n                        <Flex>\n                            <Text\n                                fontSize=\"sm\"\n                                h=\"auto\"\n                                fontWeight=\"semibold\"\n                                color=\"gray.700\"\n                                mb={1}\n                                ml={1}\n                            >\n                                プロフィール\n                            </Text>\n                        </Flex>\n                        <Textarea\n                            type=\"text\"\n                            w=\"100%\"\n                            h=\"150px\"\n                            resize=\"none\"\n                            onChange={onChangeBody}\n                            value={body}\n                            readOnly={readOnly}\n                        />\n                    </Box>\n                </ModalBody>\n                <ModalFooter>\n                    {/* 更新、閉じるボタン */}\n                    <Flex>\n                        <Button\n                            bg=\"orange.400\"\n                            color=\"white\"\n                            onClick={() => {}}\n                            mr=\"20px\"\n                            display={update}\n                        >\n                            更新する\n                        </Button>\n                        <Button\n                            bgGradient={gradationGreen}\n                            color=\"white\"\n                            onClick={onClose}\n                        >\n                            Close\n                        </Button>\n                    </Flex>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n","import { useCallback, useState } from \"react\";\n\nimport apiClient from \"../../client/apiClient\";\nimport { UserData } from \"../../type/api/UserDataType\"\n\nexport const useGetUser = () =>\n{\n    const [ user, setUser ] = useState<UserData>();\n\n    const getUser = useCallback((id:string|undefined) => {\n        apiClient\n            .get<UserData>(`/api/user/${id}`)\n            .then( ( res ) =>\n            {\n                setUser( res.data );\n            }\n            )\n            .catch( () =>\n            {\n\n            } )\n    }, []);\n\n    return { getUser, user };\n};\n","import { memo, VFC } from \"react\";\nimport { Flex, Avatar, useDisclosure } from \"@chakra-ui/react\";\n\nimport { ShortText } from \"../atoms/typography/ShortText\";\nimport { UserData } from \"../../type/api/UserDataType\";\nimport { ProfileModal } from \"../organisms/ProfileModal\";\n\ntype Props = {\n    user: UserData;\n    m?: string;\n};\n\nexport const UserInfoBox: VFC<Props> = memo((props) => {\n    const { user, m } = props;\n    const { id, name, image, job } = user;\n\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n    return (\n        <Flex\n            h={{ sm: \"40px\", base: \"30px\" }}\n            mt=\"auto\"\n            ml=\"auto\"\n            m={m}\n            onClick={onOpen}\n            cursor=\"pointer\"\n            _hover={{ bg: \"gray.200\" }}\n        >\n            <Avatar\n                bg=\"gray.400\"\n                size=\"sm\"\n                mr=\"10px\"\n                my=\"auto\"\n                src={image}\n            ></Avatar>\n            <Flex\n                flexDirection=\"column\"\n                my=\"auto\"\n                w=\"100px\"\n                alignItems=\"start\"\n                overflow=\"hidden\"\n                textAlign=\"left\"\n            >\n                <ShortText fontSize=\"sm\" w=\"100px\">\n                    {name}\n                </ShortText>\n                <ShortText fontSize=\"13px\" color=\"gray\">\n                    {job}\n                </ShortText>\n            </Flex>\n            <ProfileModal isOpen={isOpen} onClose={onClose} id={id} />\n        </Flex>\n    );\n});\n","import { Flex } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    mb: string;\n    onClick?: () => void;\n};\n\nexport const CardFrame: VFC<Props> = memo((props) => {\n    const { children, mb, onClick } = props;\n\n    return (\n        <Flex\n            w=\"98%\"\n            h={{ sm: \"33vh\", base: \"90vh\" }}\n            bg=\"white\"\n            borderRadius=\"10px\"\n            px={{ sm: \"30px\", base: \"25px\" }}\n            py={{ sm: \"15px\", base: \"5px\" }}\n            shadow=\"md\"\n            mb={mb}\n            _hover={{ cursor: \"pointer\", opacity: 0.8 }}\n            onClick={onClick}\n            flexDirection={{ sm: \"row\", base: \"column\" }}\n        >\n            {children}\n        </Flex>\n    );\n});\n","import { VFC } from \"react\";\nimport { Flex, IconButton, Text } from \"@chakra-ui/react\";\nimport { HiHeart } from \"react-icons/hi\";\n\ntype Props = {\n    value: number;\n};\n\nexport const LikeButton: VFC<Props> = (props) => {\n    const { value } = props;\n    return (\n        <Flex>\n            <IconButton\n                aria-label=\"like\"\n                icon={<HiHeart size=\"25px\" />}\n                size=\"0px\"\n                color=\"gray\"\n                bg=\"none\"\n                _focus={{ outline: \"none\" }}\n            />\n            <Text fontSize=\"15px\" color=\"gray\" ml=\"5px\" pt=\"1.5px\">\n                {value}\n            </Text>\n        </Flex>\n    );\n};\n","import { Text, Flex, IconButton } from \"@chakra-ui/react\";\nimport { HiShare } from \"react-icons/hi\";\n\nexport const ShareButton = () => {\n    return (\n        <Flex>\n            <IconButton\n                aria-label=\"like\"\n                icon={<HiShare size=\"23px\" />}\n                size=\"0px\"\n                color=\"gray\"\n                bg=\"none\"\n                _focus={{ outline: \"none\" }}\n            />\n            <Text fontSize=\"15px\" mr=\"5px\"></Text>\n        </Flex>\n    );\n};\n","import { VFC } from \"react\";\nimport { Flex, IconButton, Text } from \"@chakra-ui/react\";\nimport { HiOutlineChat } from \"react-icons/hi\";\n\ntype Props = {\n    value: number;\n};\n\nexport const CommentButton: VFC<Props> = (props) => {\n    const { value } = props;\n    return (\n        <Flex>\n            <HiOutlineChat size=\"24px\" color=\"gray\" />\n            <Text fontSize=\"15px\" color=\"gray\" ml=\"5px\" pt=\"1.5px\">\n                {value}\n            </Text>\n        </Flex>\n    );\n};\n","import { Flex } from \"@chakra-ui/react\";\nimport { memo, VFC } from \"react\";\nimport { LikeButton } from \"../../atoms/button/LikeButton\";\nimport { ShareButton } from \"../../atoms/button/ShareButton\";\nimport { CommentButton } from \"../../atoms/button/CommentButton\";\n\ntype Props = {\n    comment_val: number;\n    like_val: number;\n};\n\nexport const CardReactionButtons: VFC<Props> = memo((props) => {\n    const { comment_val, like_val } = props;\n\n    return (\n        <Flex\n            mt=\"5%\"\n            w={{ sm: \"none\", base: \"70%\" }}\n            mx={{ sm: \"0\", base: \"auto\" }}\n        >\n            <Flex w=\"33%\" mr=\"auto\">\n                <CommentButton value={comment_val} />\n            </Flex>\n            <Flex w=\"auto\" mr=\"auto\">\n                <LikeButton value={like_val} />\n            </Flex>\n            <Flex w=\"auto\" ml=\"auto\">\n                <ShareButton />\n            </Flex>\n        </Flex>\n    );\n});\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Box, Flex } from \"@chakra-ui/react\";\n\nimport { CardMusicBox } from \"../../molecules/postCard/CardMusicBox\";\nimport { CardComment } from \"../../molecules/postCard/CardComment\";\nimport { Rating } from \"../../atoms/button/Rating\";\nimport { UserInfoBox } from \"../../molecules/UserInfoBox\";\nimport { CardFrame } from \"../../atoms/frame/CardFrame\";\nimport { PostsDataType } from \"../../../type/api/PostsDataType\";\nimport { CardReactionButtons } from \"../../molecules/postCard/CardReactionButtons\";\n\ntype Props = {\n    post: PostsDataType;\n};\n\nexport const LgPostCard: VFC<Props> = memo((props) => {\n    const { post } = props;\n    const { user, track, review, reaction, id } = post;\n    const { comment_val, like_val } = reaction;\n    const history = useHistory();\n    const onClickCard = () => {\n        history.push(`/post/${id}`);\n    };\n\n    return (\n        <Box display={{ sm: \"inline\", base: \"none\" }}>\n            <Flex position=\"relative\" w=\"100%\" h=\"100%\">\n                <CardFrame mb=\"2%\" onClick={onClickCard}>\n                    {/* 曲情報 */}\n                    <CardMusicBox\n                        img={track.img}\n                        title={track.title}\n                        artist={track.artist}\n                    />\n                    <Flex\n                        w=\"70%\"\n                        h=\"30vh\"\n                        pb=\"8vh\"\n                        mr=\"auto\"\n                        flexFlow=\"column\"\n                        textAlign=\"left\"\n                    >\n                        {/* コメント */}\n                        <CardComment title={review.title} body={review.body} />\n                    </Flex>\n                </CardFrame>\n                {/* 上からいいねボタン等を重ねる */}\n                <Flex position=\"absolute\" w=\"60%\" ml=\"32%\" mt=\"23.5vh\">\n                    <Flex flexDirection=\"column\" w=\"100%\">\n                        {/* 評価 */}\n                        <Rating rating={review.star} />\n                        {/* 投稿へのコメント、いいねなど */}\n                        <CardReactionButtons\n                            comment_val={comment_val}\n                            like_val={like_val}\n                        />\n                    </Flex>\n                    {/* コメントしたユーザー */}\n                    <Flex w=\"25%\">\n                        <UserInfoBox\n                            user={{\n                                id: user.id,\n                                name: user.name,\n                                job: user.job,\n                                image: user.img,\n                            }}\n                            m=\"auto\"\n                        />\n                    </Flex>\n                </Flex>\n            </Flex>\n        </Box>\n    );\n});\n","import { memo } from \"react\";\nimport { Spinner } from \"@chakra-ui/react\";\n\nexport const LoadingPageSpinner = memo(() => {\n    return (\n        <Spinner\n            thickness=\"4px\"\n            speed=\"0.8s\"\n            emptyColor=\"gray.200\"\n            color=\"#c4de71\"\n            size=\"xl\"\n            m=\"auto\"\n            mt=\"50%\"\n        />\n    );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\n\ntype Props = {\n    rating: number;\n};\n\nexport const SmRating: VFC<Props> = (props) => {\n    const { rating } = props;\n    const starSize = \"22px\";\n    const gap = \"1px\";\n\n    let fixedRating = rating.toString();\n    if (fixedRating.length === 1) {\n        fixedRating = fixedRating + \".0\";\n    }\n\n    return (\n        <Flex>\n            {[1, 2, 3, 4, 5].map((value) =>\n                rating >= value ? (\n                    <Box mx={gap}>\n                        <BsStarFill fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : rating >= value - 0.5 ? (\n                    <Box mx={gap}>\n                        <BsStarHalf fontSize={starSize} color=\"orange\" />\n                    </Box>\n                ) : (\n                    <Box mx={gap}>\n                        <BsStar fontSize={starSize} color=\"orange\" />\n                    </Box>\n                )\n            )}\n        </Flex>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Box, Flex } from \"@chakra-ui/react\";\n\nimport { CardMusicBox } from \"../../molecules/postCard/CardMusicBox\";\nimport { CardComment } from \"../../molecules/postCard/CardComment\";\nimport { SmRating } from \"../../atoms/button/SmRating\";\nimport { UserInfoBox } from \"../../molecules/UserInfoBox\";\nimport { CardFrame } from \"../../atoms/frame/CardFrame\";\nimport { PostsDataType } from \"../../../type/api/PostsDataType\";\nimport { CardReactionButtons } from \"../../molecules/postCard/CardReactionButtons\";\n\ntype Props = {\n    post: PostsDataType;\n};\n\nexport const SmPostCard: VFC<Props> = memo((props) => {\n    const { post } = props;\n    const { user, track, review, reaction, id } = post;\n    const { comment_val, like_val } = reaction;\n    const history = useHistory();\n    const onClickCard = () => {\n        history.push(`/post/${id}`);\n    };\n\n    return (\n        <Box display={{ sm: \"none\", base: \"inline\" }}>\n            <Flex position=\"relative\" w=\"100%\" h=\"100%\">\n                <CardFrame mb=\"4%\" onClick={onClickCard}>\n                    {/* 曲情報 */}\n                    <CardMusicBox\n                        img={track.img}\n                        title={track.title}\n                        artist={track.artist}\n                    />\n                    <Box mx=\"auto\">\n                        {/* <SmRating rating={review.star} isRateDisable={true} /> */}\n                        <SmRating rating={review.star} />\n                    </Box>\n                    <Flex\n                        w=\"100%\"\n                        h=\"30vh\"\n                        mr=\"auto\"\n                        mb=\"1%\"\n                        mt=\"5%\"\n                        flexFlow=\"column\"\n                        textAlign=\"left\"\n                    >\n                        {/* コメント */}\n                        <CardComment title={review.title} body={review.body} />\n                    </Flex>\n                </CardFrame>\n                {/* 上からいいねボタン等を重ねる */}\n                <Flex\n                    flexDirection=\"column\"\n                    position=\"absolute\"\n                    w=\"100%\"\n                    mt=\"75vh\"\n                >\n                    {/* 投稿へのコメント、いいねなど */}\n                    <Flex ml=\"auto\">\n                        <UserInfoBox\n                            user={{\n                                id: user.id,\n                                name: user.name,\n                                job: user.job,\n                                image: user.img,\n                            }}\n                            m=\"auto\"\n                        />\n                    </Flex>\n                    <CardReactionButtons\n                        comment_val={comment_val}\n                        like_val={like_val}\n                    />\n                </Flex>\n            </Flex>\n        </Box>\n    );\n});\n","import { memo, useEffect, useState } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Box } from \"@chakra-ui/react\";\nimport axios from \"axios\";\n\nimport { homeState } from \"../../../store/homeState\";\nimport { LgPostCard } from \"../../organisms/posts/LgPostCard\";\nimport { PostsDataType } from \"../../../type/api/PostsDataType\";\nimport Posts from \"../../../test_json/allPosts.json\";\nimport { useGetPosts } from \"../../../hooks/api/useGetPosts\";\nimport { LoadingPageSpinner } from \"../../organisms/LoadingPageSpinner\";\nimport { SmPostCard } from \"../../organisms/posts/SmPostCard\";\n\nexport const Recent = memo(() => {\n    // グローバルStateを変更、それをもとにヘッダーを変更とapiリクエストをする\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"recent\" });\n    /* ↓本番環境用 */\n    const { getPosts, api_posts, loading } = useGetPosts(\"recent\");\n    useEffect(() => getPosts(), [getPosts]);\n\n    /* ↓ローカル環境でのテスト用（test_jsonを使用） */\n    // const api_posts: Array<PostsDataType> = Posts;\n\n    return (\n        /* 本番環境用 */\n        <>\n            {loading ? (\n                <LoadingPageSpinner />\n            ) : (\n                <Box>\n                    {/* apiからjsonを引っ張り、map関数でカードを繰り返し描画 */}\n                    {api_posts.map((obj) => (\n                        <Box key={obj.id}>\n                            {/* Object.assign(オブジェクト)で、オブジェクトのスプレッドを実現 */}\n                            <LgPostCard post={Object.assign(obj)} />\n                            <SmPostCard post={Object.assign(obj)} />\n                        </Box>\n                    ))}\n                </Box>\n            )}\n        </>\n\n        /* ↓ローカル開発用 */\n        // <Box>\n        //     {/* jsonを引っ張り、map関数でカードを繰り返し描画 */}\n        //     {api_posts.map((obj) => (\n        //         <Box key={obj.id}>\n        //             {/* Object.assign(オブジェクト)で、オブジェクトのスプレッドを実現 */}\n        //             <LgPostCard post={Object.assign(obj)} />\n        //             <SmPostCard post={Object.assign(obj)} />\n        //         </Box>\n        //     ))}\n        // </Box>\n    );\n});\n","import { useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router\";\nimport apiClient from \"../../client/apiClient\";\n\nimport { PostsDataType } from \"../../type/api/PostsDataType\";\nimport { useMessage } from \"../message/useMessage\";\nimport { useErrorMessage } from \"../useErrorMessage\";\n\ntype Sort = \"recent\" | \"follow\" | \"popular\";\n\nexport const useGetPosts = (sort: Sort) => {\n    const [api_posts, setApiPosts] = useState<Array<PostsDataType>>([]);\n    const [loading, setLoading] = useState(false);\n\n    const getPosts = useCallback(() => {\n        setLoading(true);\n        apiClient\n            .get<Array<PostsDataType>>(`/api/posts/recent`)\n            .then((res) => setApiPosts(res.data))\n            .catch( () =>\n            {\n            })\n            .finally(() => setLoading(false));\n    }, []);\n\n    return { getPosts, api_posts, loading };\n};\n","import { AspectRatio, Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { gradationGreen } from \"../atoms/color/gradationGreen\";\nimport { BsQuestionCircle } from \"react-icons/bs\";\n\ntype Props = {\n    id: string | undefined;\n    title: string | undefined;\n    album: string | undefined;\n    artist: string | undefined;\n    release: string | undefined;\n};\n\nexport const MusicDetailBox: VFC<Props> = (props) => {\n    const {\n        id = undefined,\n        title = undefined,\n        album = undefined,\n        artist = undefined,\n        release = undefined,\n    } = props;\n    return (\n        <Flex flexDirection={{ sm: \"row\", base: \"column\" }}>\n            <AspectRatio\n                ratio={1 / 1}\n                w={{ sm: \"50%\", base: \"100%\" }}\n                h={{ sm: \"50%\", base: \"40vh\" }}\n                mx={{ sm: \"0\", base: \"auto\" }}\n            >\n                {id === undefined ? (\n                    <Box bgGradient={gradationGreen}>\n                        <BsQuestionCircle color=\"gray\" fontSize=\"13vh\" />\n                    </Box>\n                ) : (\n                    <iframe\n                        src={`https://open.spotify.com/embed/track/${id}`}\n                        frameBorder=\"0\"\n                        allow=\"encrypted-media\"\n                    />\n                )}\n            </AspectRatio>\n            <Flex\n                alignItems=\"start\"\n                flexFlow=\"column\"\n                ml={5}\n                mt={{ sm: \"auto\", base: \"3vh\" }}\n                overflow=\"hidden\"\n                w={{ sm: \"65%\", base: \"100%\" }}\n                h=\"100%\"\n                position=\"relative\"\n                textAlign=\"left\"\n            >\n                <Text\n                    fontSize={{ sm: \"25px\", base: \"lg\" }}\n                    fontWeight=\"bold\"\n                    mb=\"1vh\"\n                >\n                    {title === undefined ? \"楽曲情報が取得できません\" : title}\n                </Text>\n                <MusicDetailTopics title=\"収録アルバム\" content={album} />\n                <MusicDetailTopics title=\"アーティスト\" content={artist} />\n                <MusicDetailTopics title=\"リリース\" content={release} />\n            </Flex>\n        </Flex>\n    );\n};\n\n// 内部的に使用するコンポーネント\n// 曲の各詳細情報をコンポーネント化\ntype MusicDetailTopicsType = {\n    title: string;\n    content: string | undefined;\n};\n\nconst MusicDetailTopics: VFC<MusicDetailTopicsType> = (props) => {\n    const { title, content } = props;\n\n    return (\n        <>\n            <Text\n                fontSize={{ sm: \"md\", base: \"xs\" }}\n                fontWeight=\"bold\"\n                color=\"gray.600\"\n            >\n                {title}\n            </Text>\n            <Text\n                fontSize={{ sm: \"sm\", base: \"12px\" }}\n                mb=\"1vh\"\n                color=\"gray.600\"\n            >\n                {content === undefined ? \"???\" : content}\n            </Text>\n        </>\n    );\n};\n","import { memo, VFC } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/react\";\nimport { CommentButton } from \"../../atoms/button/CommentButton\";\nimport { LikeButton } from \"../../atoms/button/LikeButton\";\nimport { ShareButton } from \"../../atoms/button/ShareButton\";\n\ntype Props = {\n  comment_val: number;\n  like_val: number;\n};\n\nexport const ReactionButtons: VFC<Props> = memo((props) => {\n  const { comment_val, like_val } = props;\n  return (\n    <Flex justifyContent=\"center\" w=\"80%\" mt={5}>\n      <Box mr=\"auto\">\n        <CommentButton value={comment_val} />\n      </Box>\n      <Box mx=\"auto\">\n        <LikeButton value={like_val} />\n      </Box>\n      <Box ml=\"auto\">\n        <ShareButton />\n      </Box>\n    </Flex>\n  );\n});\n","import { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { Rating } from \"../../atoms/button/Rating\";\nimport { ReactionButtons } from \"../../molecules/detail/ReactionButtons\";\nimport { UserInfoBox } from \"../../molecules/UserInfoBox\";\nimport { UserData } from \"../../../type/api/UserDataType\";\n\ntype Props = {\n    userName: string | undefined;\n    userTitle: string | undefined;\n    userImg: string | undefined;\n    userId: string | undefined;\n    rating?: number;\n    title: string;\n    body: string;\n    commentVal?: number;\n    likeVal?: number;\n};\n\nexport const DetailBox: VFC<Props> = (props) => {\n    const {\n        userName = \"\",\n        userTitle = \"\",\n        userImg = \"\",\n        userId = \"\",\n        rating,\n        title = \"\",\n        body = \"\",\n        commentVal,\n        likeVal,\n    } = props;\n\n    const user: UserData = {\n        id: userId,\n        name: userName,\n        job: userTitle,\n        image: userImg,\n    };\n\n    return (\n        <Box>\n            <Flex textAlign=\"left\">\n                <Box mr={2}>\n                    <UserInfoBox user={user} />\n                </Box>\n                {/* コメントのときは評価の星を表示しない */}\n                {rating === undefined ? <div /> : <Rating rating={rating} />}\n            </Flex>\n            <Box mt={5} textAlign=\"left\">\n                <Text fontSize=\"lg\" fontWeight=\"bold\">\n                    {title}\n                </Text>\n                <Text fontSize=\"sm\" pr={{ sm: \"10px\", base: \"none\" }} mt={2}>\n                    {body}\n                </Text>\n            </Box>\n            {/* コメントのときは、「コメント」、「いいね」、「シェア」を表示しない */}\n            {commentVal === undefined || likeVal === undefined ? (\n                <div />\n            ) : (\n                <ReactionButtons comment_val={commentVal} like_val={likeVal} />\n            )}\n        </Box>\n    );\n};\n","import { useEffect, VFC } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Box, Divider } from \"@chakra-ui/react\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { homeState } from \"../../store/homeState\";\nimport { useGetDetail } from \"../../hooks/api/useGetDetail\";\nimport json_postDetail from \"../../test_json/postDetail.json\";\nimport { LoadingPageSpinner } from \"../organisms/LoadingPageSpinner\";\nimport { MusicDetailBox } from \"../organisms/MusicDetailBox\";\nimport { DetailBox } from \"../organisms/detail/DetailBox\";\n\ntype Param = {\n    id: string;\n};\n\ntype Props = {};\n\nexport const PostDetail: VFC<Props> = (props) => {\n    const {} = props;\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"detail\" });\n    const { id } = useParams<Param>();\n    /* ↓本番環境用 */\n    const { getPostDetail, api_postDetail, loading } = useGetDetail(id);\n    useEffect(() => getPostDetail(), []);\n\n    /* ローカルでのテスト用*/\n    // const api_postDetail = json_postDetail;\n\n    return (\n        /* ↓本番環境用 */\n        <>\n            {loading ? (\n                <LoadingPageSpinner />\n            ) : (\n                <Box>\n                    <MusicDetailBox\n                        id={api_postDetail.track.id}\n                        title={api_postDetail.track.title}\n                        album={api_postDetail.track.album}\n                        artist={api_postDetail.track.artist}\n                        release={api_postDetail.track.release}\n                    />\n                    <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n                    <DetailBox\n                        userName={api_postDetail.user.name}\n                        userTitle={api_postDetail.user.job}\n                        userImg={api_postDetail.user.img}\n                        userId={api_postDetail.user.id}\n                        rating={api_postDetail.review.star}\n                        title={api_postDetail.review.title}\n                        body={api_postDetail.review.body}\n                        commentVal={api_postDetail.reaction.comment_val}\n                        likeVal={api_postDetail.reaction.like_val}\n                    />\n                    <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n                </Box>\n            )}\n        </>\n\n        /* ローカルでのテスト用*/\n        // <Box mx={5}>\n        //     <MusicDetailBox\n        //         id={`https://open.spotify.com/embed/track/${api_postDetail.track.id}`}\n        //         title={api_postDetail.track.title}\n        //         album={api_postDetail.track.album}\n        //         artist={api_postDetail.track.artist}\n        //         release={api_postDetail.track.release}\n        //     />\n        //     <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n        //     <DetailBox\n        //         userName={api_postDetail.user.name}\n        //         userTitle={api_postDetail.user.job}\n        //         userImg={api_postDetail.user.img}\n        //         userId={api_postDetail.user.id}\n        //         rating={api_postDetail.review.star}\n        //         title={api_postDetail.review.title}\n        //         body={api_postDetail.review.body}\n        //         commentVal={api_postDetail.reaction.comment_val}\n        //         likeVal={api_postDetail.reaction.like_val}\n        //     />\n        //     <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n        // </Box>\n    );\n};\n","import { useCallback, useState } from \"react\";\nimport { PostsDataType } from \"../../type/api/PostsDataType\";\nimport failed from \"../../test_json/failedDetail.json\";\nimport apiClient from \"../../client/apiClient\";\nimport { useHistory } from \"react-router\";\n\nexport const useGetDetail = ( id: string ) =>\n{\n    const [ api_postDetail, setApiPostDetail ] = useState<PostsDataType>( failed );\n    const [ loading, setLoading ] = useState( false )\n    const history = useHistory()\n    const getPostDetail = useCallback(() =>\n    {\n        setLoading( true );\n\n        apiClient\n        .get<PostsDataType>( `/api/posts/${ id }` )\n        .then( ( res ) => setApiPostDetail( res.data ) )\n        .catch( () =>\n        {\n            history.push(\"/page404\")\n        }\n        ).finally( () => setLoading( false ) );\n    },[])\n\n    return { getPostDetail, api_postDetail, loading };\n};\n","import { Breadcrumb, BreadcrumbItem, BreadcrumbLink } from \"@chakra-ui/react\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { memo, useEffect, useState, VFC } from \"react\";\n\ntype Props = {\n    step: \"track\" | \"rate\" | \"check\";\n    goTrackInfo: () => void;\n    goRate: () => void;\n    goCheck: () => void;\n    isTrackNull: boolean;\n    isRatesNull: boolean;\n};\n\ntype Weight = \"normal\" | \"bold\";\ntype Color = \"black\" | \"gray.500\";\n\nexport const CreateBreadcrumb: VFC<Props> = memo((props) => {\n    const { step, goTrackInfo, goRate, goCheck, isTrackNull, isRatesNull } =\n        props;\n\n    const [trackColor, setTrackColor] = useState<Color>(\"gray.500\");\n    const [rateColor, setRateColor] = useState<Color>(\"gray.500\");\n    const [checkColor, setCheckColor] = useState<Color>(\"gray.500\");\n    const [trackWeight, setTrackWeight] = useState<Weight>(\"normal\");\n    const [rateWeight, setRateWeight] = useState<Weight>(\"normal\");\n    const [checkWeight, setCheckWeight] = useState<Weight>(\"normal\");\n\n    useEffect(() => {\n        // 一旦初期化して変化部分のみ値を指定する\n        setTrackWeight(\"normal\");\n        setTrackColor(\"gray.500\");\n        setRateWeight(\"normal\");\n        setRateColor(\"gray.500\");\n        setCheckWeight(\"normal\");\n        setCheckColor(\"gray.500\");\n        if (step === \"track\") {\n            setTrackWeight(\"bold\");\n            setTrackColor(\"black\");\n        } else if (step === \"rate\") {\n            setRateWeight(\"bold\");\n            setRateColor(\"black\");\n        } else {\n            setCheckWeight(\"bold\");\n            setCheckColor(\"black\");\n        }\n    }, [step]);\n\n    // 楽曲情報が入力されていなければ評価画面に行けない\n    // 評価が入力されていなければ内容確認画面に行けない\n    var canMoveRate: \"auto\" | \"none\" = isTrackNull ? \"none\" : \"auto\";\n    var canMoveCheck: \"auto\" | \"none\" =\n        isTrackNull || isRatesNull ? \"none\" : \"auto\";\n\n    useEffect(() => {\n        isTrackNull ? (canMoveRate = \"none\") : (canMoveRate = \"auto\");\n    }, [isTrackNull]);\n\n    useEffect(() => {\n        isTrackNull && isRatesNull\n            ? (canMoveCheck = \"none\")\n            : (canMoveCheck = \"auto\");\n    }, [isTrackNull]);\n\n    return (\n        <Breadcrumb\n            spacing={{ sm: \"20px\", base: \"10px\" }}\n            ml=\"0px\"\n            separator={\n                <ChevronRightIcon\n                    color=\"gray.500\"\n                    fontSize={{ sm: \"30px\", base: \"20px\" }}\n                />\n            }\n            textAlign=\"left\"\n            mb={{ sm: \"30px\", base: \"15px\" }}\n        >\n            <BreadcrumbItem isCurrentPage={step === \"track\"}>\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={trackColor}\n                    fontWeight={trackWeight}\n                    onClick={goTrackInfo}\n                >\n                    楽曲情報\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbItem\n                isCurrentPage={step === \"rate\"}\n                pointerEvents={canMoveRate}\n            >\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={rateColor}\n                    fontWeight={rateWeight}\n                    onClick={goRate}\n                >\n                    評価\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbItem\n                isCurrentPage={step === \"check\"}\n                pointerEvents={canMoveCheck}\n            >\n                <BreadcrumbLink\n                    fontSize={{ sm: \"20px\", base: \"15px\" }}\n                    color={checkColor}\n                    fontWeight={checkWeight}\n                    onClick={goCheck}\n                >\n                    内容確認\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n        </Breadcrumb>\n    );\n});\n","import { Button } from \"@chakra-ui/button\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { VFC } from \"react\";\n\ntype Props = {\n    onClick: () => void;\n    mt?: string | { md?: string; sm?: string; base?: string };\n    isDisabled?: boolean;\n    text: string;\n};\n\nexport const CreateTransButton: VFC<Props> = (props) => {\n    const { onClick, mt = \"none\", isDisabled = false, text } = props;\n    return (\n        <Button\n            mt={mt}\n            w=\"auto\"\n            h={{ sm: \"30px\", base: \"25px\" }}\n            ml=\"auto\"\n            bg=\"orange.300\"\n            color=\"white\"\n            onClick={onClick}\n            fontSize={{ sm: \"15px\", base: \"12px\" }}\n            _focus={{ outline: \"none\" }}\n            isDisabled={isDisabled}\n        >\n            {text}\n        </Button>\n    );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback } from \"react\";\nimport { useToast } from \"@chakra-ui/react\";\n\ntype Props = {\n  title: string;\n  status: \"info\" | \"warning\" | \"success\" | \"error\";\n};\n\nexport const useMessage = () => {\n  const toast = useToast();\n\n  const showMessage = useCallback((props: Props) => {\n    const { title, status } = props;\n    toast({\n      title,\n      status,\n      position: \"top\",\n      duration: 2000,\n      isClosable: true\n    });\n  }, []);\n\n  return { showMessage };\n};\n","import { Box, Button, Flex, Input, Text } from \"@chakra-ui/react\";\nimport { useEffect, useState, VFC } from \"react\";\n\nimport { gradationGreen } from \"../../atoms/color/gradationGreen\";\nimport { MusicDetailBox } from \"../MusicDetailBox\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { useGetTrack } from \"../../../hooks/api/useGetTrack\";\nimport { useValidateTrackURL } from \"../../../hooks/useValidateTrackURL\";\nimport { useMessage } from \"../../../hooks/message/useMessage\";\nimport { TrackDataType } from \"../../../type/api/TrackDataType\";\n\ntype Props = {\n    goRate: () => void;\n    onChangeTrackURL: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    trackUrl: string;\n    trackId: string | undefined;\n    setTrackId: (id: string | undefined) => void;\n    trackData: TrackDataType;\n    saveTrackData: (obj: TrackDataType) => void;\n    isTrackNull: boolean;\n};\n\nexport const CreateTrackInfo: VFC<Props> = (props) => {\n    const {\n        goRate,\n        onChangeTrackURL,\n        trackUrl,\n        trackId,\n        setTrackId,\n        isTrackNull,\n        trackData,\n        saveTrackData,\n    } = props;\n    const { getTrack } = useGetTrack();\n    const { validateTrackURL } = useValidateTrackURL();\n    const { showMessage } = useMessage();\n\n    // checkTrackとuseEffect内の楽曲登録作業の橋渡しをするstateを準備したい\n    // 一旦、このページ内の状態で楽曲データを預かるためのstate\n    // これを使って楽曲有無の確認をするapiを叩き、確認できたら正式にcreateグローバルstateに登録\n    const [onceTrack, setOnceTrack] = useState<TrackDataType>();\n    const saveOnceTrackData = (val: TrackDataType) => {\n        setOnceTrack(val);\n    };\n\n    const checkTrack = () => {\n        const validatedTrackId = validateTrackURL(trackUrl);\n        // バリデーションを行う\n        if (validatedTrackId === undefined) {\n            showMessage({\n                title: \"正しいURLを入力してください\",\n                status: \"error\",\n            });\n        }\n        // バリデーションをクリアしたidで実際に楽曲を取得できるか判定\n        else {\n            getTrack(validatedTrackId, saveOnceTrackData);\n        }\n    };\n\n    // APIで楽曲情報が確認できたタイミングで保存\n    // ちゃんと取得できていたら、一旦保存しておいた楽曲情報を正式にグローバルで保存\n    useEffect(() => {\n        if (onceTrack !== undefined) {\n            setTrackId(onceTrack.id);\n            saveTrackData(onceTrack);\n        }\n    }, [onceTrack]);\n\n    return (\n        <Box>\n            {/* 入力された共有URIから楽曲が取得できていたら表示 */}\n            {trackId !== undefined && (\n                <MusicDetailBox\n                    id={trackData?.id}\n                    title={trackData?.title}\n                    album={trackData?.album}\n                    artist={trackData?.artist}\n                    release={trackData?.release}\n                />\n            )}\n            <Flex flexDirection=\"column\" mt=\"30px\">\n                <Box>\n                    <Text\n                        ml={1}\n                        mb={2}\n                        fontSize={{ sm: \"lg\", base: \"13px\" }}\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        Spotifyの楽曲シェア用URLを入力してください\n                    </Text>\n                    <Flex>\n                        <Input onChange={onChangeTrackURL} value={trackUrl} />\n                        <Button\n                            ml=\"2%\"\n                            bgGradient={gradationGreen}\n                            color=\"white\"\n                            fontSize={{ sm: \"lg\", base: \"sm\" }}\n                            mt=\"auto\"\n                            onClick={checkTrack}\n                        >\n                            確認\n                        </Button>\n                    </Flex>\n                </Box>\n                <CreateTransButton\n                    onClick={goRate}\n                    mt={{ sm: \"30px\", base: \"20px\" }}\n                    isDisabled={isTrackNull}\n                    text=\"次へ\"\n                />\n            </Flex>\n        </Box>\n    );\n};\n","import { useCallback, useState } from \"react\";\n\nimport apiClient from \"../../client/apiClient\";\nimport { TrackDataType } from \"../../type/api/TrackDataType\";\nimport {useMessage} from \"../message/useMessage\"\n\n\nexport const useGetTrack = () =>\n{\n    const { showMessage } = useMessage();\n    const getTrack = useCallback( ( id: string | undefined, saveTrack: (val:TrackDataType )=>void ) =>\n    {\n        var track: TrackDataType\n\n        apiClient\n            .get<TrackDataType>(`/api/track/${id}`)\n            .then( ( res ) =>\n            {\n                saveTrack(res.data)\n            }\n            )\n            .catch( () =>\n            {\n                saveTrack( undefined )\n                showMessage( {title: \"楽曲を取得できませんでした\",status: \"error\",});\n            })\n    }, []);\n\n    return { getTrack };\n};\n","import { useCallback, useState } from \"react\";\nimport { useMessage } from \"./message/useMessage\";\n\nexport const useValidateTrackURL = () =>\n{    const head = /(https\\:\\/\\/open\\.spotify\\.com\\/track\\/)/;\n    const foot = /(\\?si=)/;\n    const validateTrackURL = useCallback( ( url: string ) =>\n    {\n        var id:string|undefined;\n        const regexHead = head.test( url );\n        const regexFoot = foot.test( url );\n        {\n            // urlの頭とおしりがspotifyの楽曲シェアURLのものか判定\n            if ( regexHead && regexFoot )\n            {\n                 const result = url.match(\n                    /https\\:\\/\\/open\\.spotify\\.com\\/track\\/(.*)\\?si=/\n                 );\n                // もし楽曲のURLであれば、楽曲IDの部分の文字数が適切なものか判定\n                if ( result![1].length === 22 )\n                {\n                    id = result![1];\n                }\n                else\n                {\n                    id = undefined;\n                }\n            } else{\n                    id = undefined;\n            }\n        }\n        return id;\n    },[])\n        return { validateTrackURL }\n}\n","import { useState, VFC } from \"react\";\nimport { BsStar, BsStarFill, BsStarHalf } from \"react-icons/bs\";\nimport { Box, Flex, useBreakpointValue } from \"@chakra-ui/react\";\n\ntype Props = {\n    num: number;\n    rate: number;\n    setRate: (val: number) => void;\n};\n\nexport const StarButton: VFC<Props> = (props) => {\n    const { num, rate, setRate } = props;\n\n    const onClickHalf = () => {\n        setRate(num - 0.5);\n    };\n    const onClickFill = () => {\n        setRate(num);\n    };\n\n    const StarSize = useBreakpointValue({ sm: \"50px\", base: \"40px\" });\n    const starGap = useBreakpointValue({ sm: \"60px\", base: \"45px\" });\n\n    return (\n        <Box>\n            {/* 星のアイコンを表示、zIndexによってボタンと重ねる  */}\n            <Flex\n                boxSize=\"50px\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                position=\"absolute\"\n                zIndex=\"1\"\n            >\n                {rate >= num ? (\n                    <BsStarFill fontSize={StarSize} color=\"orange\" />\n                ) : rate >= num - 0.5 ? (\n                    <BsStarHalf fontSize={StarSize} color=\"orange\" />\n                ) : (\n                    <BsStar fontSize={StarSize} color=\"orange\" />\n                )}\n            </Flex>\n            {/* 星のアイコンの上に見えないボタンを設置 */}\n            <Flex boxSize=\"50px\" position=\"absolute\" zIndex=\"2\">\n                {/* 左半分のボタン */}\n                <button\n                    onClick={onClickHalf}\n                    style={{\n                        borderRadius: \"0\",\n                        height: \"100%\",\n                        width: \"50%\",\n                    }}\n                ></button>\n                {/* 右半分のボタン */}\n                <button\n                    onClick={onClickFill}\n                    style={{\n                        borderRadius: \"0\",\n                        height: \"100%\",\n                        width: \"50%\",\n                    }}\n                ></button>\n            </Flex>\n            <Box w={starGap} />\n        </Box>\n    );\n};\n","import { VFC } from \"react\";\nimport { Flex, Text } from \"@chakra-ui/react\";\nimport { StarButton } from \"../../atoms/button/StarButton\";\n\ntype Props = {\n    rate: number;\n    setRate: (val: number) => void;\n};\n\nexport const FiveStarButton: VFC<Props> = (props) => {\n    const { rate, setRate } = props;\n    return (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Flex mt=\"10px\" mb={{ sm: \"50px\", base: \"45px\" }}>\n                {[1, 2, 3, 4, 5].map((value) => (\n                    <StarButton num={value} rate={rate} setRate={setRate} />\n                ))}\n            </Flex>\n            <Text\n                mt={{ sm: \"5px\", base: \"0\" }}\n                mx=\"auto\"\n                pr={{ sm: \"10px\", base: \"0\" }}\n                pl={{ sm: \"0\", base: \"5px\" }}\n                w=\"30%\"\n                fontWeight=\"bold\"\n                fontSize={{ sm: \"25px\", base: \"20px\" }}\n                color=\"gray.600\"\n            >\n                {rate.toFixed(1)}\n            </Text>\n        </Flex>\n    );\n};\n","import { Box, Flex, Input, Text, Textarea } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { FiveStarButton } from \"../../molecules/create/FiveStarButton\";\n\ntype Props = {\n    goTrackInfo: () => void;\n    goCheck: () => void;\n    onChangeRate: (val: number) => void;\n    onChangeTitle: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onChangeBody: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    rate: number;\n    title: string;\n    body: string;\n    isRatesNull: boolean;\n};\n\nexport const CreateRate: VFC<Props> = (props) => {\n    const {\n        goTrackInfo,\n        goCheck,\n        onChangeRate,\n        onChangeTitle,\n        onChangeBody,\n        rate,\n        title,\n        body,\n        isRatesNull,\n    } = props;\n\n    return (\n        <Flex flexDirection=\"column\">\n            <Flex flexDirection=\"column\">\n                <Text\n                    fontSize={{ sm: \"lg\", base: \"md\" }}\n                    ml=\"10px\"\n                    fontWeight=\"semibold\"\n                    color=\"gray.700\"\n                >\n                    ① 評価\n                </Text>\n                <Box textAlign=\"center\" position=\"relative\">\n                    <FiveStarButton rate={rate} setRate={onChangeRate} />\n                </Box>\n            </Flex>\n            <Box mt=\"30px\">\n                <Flex>\n                    <Text\n                        fontSize={{ sm: \"lg\", base: \"md\" }}\n                        ml=\"10px\"\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        ① タイトル（30字以内）\n                    </Text>\n                    {title.length >= 30 && (\n                        <Text color=\"red\">※30字を超えています</Text>\n                    )}\n                </Flex>\n                <Input\n                    type=\"text\"\n                    w=\"100%\"\n                    mt=\"10px\"\n                    onChange={onChangeTitle}\n                    value={title}\n                />\n            </Box>\n            <Box mt=\"30px\">\n                <Flex>\n                    <Text\n                        fontSize={{ sm: \"lg\", base: \"md\" }}\n                        ml=\"10px\"\n                        h=\"auto\"\n                        fontWeight=\"semibold\"\n                        color=\"gray.700\"\n                    >\n                        ① 本文（500字以内）\n                    </Text>\n                    {body.length >= 500 && (\n                        <Text color=\"red\">※500字を超えています</Text>\n                    )}\n                </Flex>\n                <Textarea\n                    type=\"text\"\n                    w=\"100%\"\n                    h=\"100px\"\n                    mt=\"10px\"\n                    onChange={onChangeBody}\n                    value={body}\n                />\n            </Box>\n            <Flex ml=\"auto\">\n                <Box>\n                    <CreateTransButton\n                        onClick={goTrackInfo}\n                        mt=\"30px\"\n                        text=\"戻る\"\n                    />\n                </Box>\n                <Box w=\"30px\" />\n                <Box>\n                    <CreateTransButton\n                        onClick={goCheck}\n                        mt=\"30px\"\n                        isDisabled={isRatesNull}\n                        text=\"次へ\"\n                    />\n                </Box>\n            </Flex>\n        </Flex>\n    );\n};\n","import { Box, Divider, Flex } from \"@chakra-ui/react\";\nimport { VFC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { usePostCreate } from \"../../../hooks/api/usePostCreate\";\nimport { meState } from \"../../../store/meState\";\nimport { TrackDataType } from \"../../../type/api/TrackDataType\";\nimport { CreateTransButton } from \"../../atoms/button/CreateTransButton\";\nimport { DetailBox } from \"../detail/DetailBox\";\nimport { MusicDetailBox } from \"../MusicDetailBox\";\n\ntype Props = {\n    trackData: TrackDataType;\n    rate: number;\n    title: string;\n    body: string;\n    trackId: string | undefined;\n    goRate: () => void;\n    setTransAlert: (bool: boolean) => void;\n};\n\nexport const CreateCheck: VFC<Props> = (props) => {\n    const { trackData, rate, title, body, goRate, trackId, setTransAlert } =\n        props;\n\n    // ユーザー情報を取得\n    const me = useRecoilValue(meState);\n\n    // 現在の内容で確定して投稿する\n    const { postCreate } = usePostCreate();\n    const onConfirm = () => {\n        postCreate(title, body, rate, trackId, setTransAlert);\n    };\n\n    return (\n        <Flex flexDirection=\"column\">\n            <MusicDetailBox\n                id={trackData?.id}\n                title={trackData?.title}\n                album={trackData?.album}\n                artist={trackData?.artist}\n                release={trackData?.release}\n            />\n            <Divider orientation=\"horizontal\" w=\"100%\" mt={5} mb=\"5\" />\n            <DetailBox\n                userId={me.id}\n                userName={me.name}\n                userTitle={me.job}\n                userImg={me.image}\n                rating={rate}\n                title={title}\n                body={body}\n            />\n            <Divider orientation=\"horizontal\" w=\"100%\" mt={5} />\n            <Flex ml=\"auto\">\n                <Box>\n                    <CreateTransButton onClick={goRate} mt=\"30px\" text=\"戻る\" />\n                </Box>\n\n                <Box w=\"30px\" />\n                <Box>\n                    <CreateTransButton\n                        onClick={onConfirm}\n                        mt=\"30px\"\n                        text=\"この内容で投稿する\"\n                    />\n                </Box>\n            </Flex>\n        </Flex>\n    );\n};\n","import { string } from \"prop-types\";\nimport { useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport apiClient from \"../../client/apiClient\";\nimport {useMessage} from \"../message/useMessage\"\n\n\nexport const usePostCreate = () =>\n{\n    const history = useHistory();\n    const { showMessage } = useMessage();\n    const postCreate = useCallback( ( title:string, body:string, rate: number, trackId:string|undefined, setTransAlert:(bool:boolean)=>void ) =>\n    {\n        const data = {\n            title: title,\n            body: body,\n            rate: rate,\n            trackId:trackId\n        }\n\n        apiClient\n            .post( `/api/create`, data)\n            .then( ( res ) =>\n            {\n                showMessage( { title: \"投稿しました\", status: \"success\", } );\n                setTransAlert( false );\n                history.push( \"/\" );\n            }\n            )\n            .catch( () =>\n            {\n                showMessage( {title: \"投稿に失敗しました\",status: \"error\",});\n            })\n    }, []);\n\n    return { postCreate };\n};\n","import { ChangeEvent, memo, useEffect, useState } from \"react\";\nimport { Box } from \"@chakra-ui/react\";\nimport { Prompt } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { CreateBreadcrumb } from \"../molecules/create/CreateBreadcrumb\";\nimport { CreateTrackInfo } from \"../organisms/create/CreateTrackInfo\";\nimport { CreateRate } from \"../organisms/create/CreateRate\";\nimport { CreateCheck } from \"../organisms/create/CreateCheck\";\nimport { homeState } from \"../../store/homeState\";\nimport { TrackDataType } from \"../../type/api/TrackDataType\";\n\nexport const Create = memo(() => {\n    const setTopic = useSetRecoilState(homeState);\n    setTopic({ topic: \"create\" });\n\n    // 画面遷移のためのState\n    const [step, setStep] = useState<\"track\" | \"rate\" | \"check\">(\"track\");\n    const goTrackInfo = () => {\n        setStep(\"track\");\n    };\n    const goRate = () => {\n        setStep(\"rate\");\n    };\n    const goCheck = () => {\n        setStep(\"check\");\n    };\n\n    // 各種投稿内容を保存しておくためのState\n    // trackIdは楽曲情報表示や「次へ」ボタンが押せるかなどの判定に使われる\n    const [trackUrl, setTrackUrl] = useState<string>(\"\");\n    const [trackId, setTrackId] = useState<string | undefined>(undefined);\n    // const [trackId, setTrackId] = useState<string | undefined>(\"\");\n    const [rate, setRate] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [body, setBody] = useState<string>(\"\");\n\n    const onChangeTrackURL = (e: ChangeEvent<HTMLInputElement>) =>\n        setTrackUrl(e.target.value);\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) =>\n        setTitle(e.target.value);\n\n    const onChangeBody = (e: ChangeEvent<HTMLTextAreaElement>) =>\n        setBody(e.target.value);\n\n    const onChangeRate = (val: number) => {\n        setRate(val);\n    };\n\n    const changeTrackId = (id: string | undefined) => {\n        setTrackId(id);\n    };\n\n    // TrackIdが空の場合はほかの画面への遷移をブロックする\n    const [isTrackNull, setIsTrackNull] = useState<boolean>(true);\n    useEffect(() => {\n        trackId === undefined ? setIsTrackNull(true) : setIsTrackNull(false);\n    }, [trackId]);\n\n    // 評価が書かれていないor字数制限よりも多い場合は確認画面への遷移をブロックする\n    const [isRatesNull, setIsRatesNull] = useState<boolean>(true);\n    useEffect(() => {\n        rate === 0.0 ||\n        title === \"\" ||\n        title.length >= 30 ||\n        body === \"\" ||\n        body.length >= 500\n            ? setIsRatesNull(true)\n            : setIsRatesNull(false);\n    }, [rate, title, body]);\n\n    // 取得に成功した楽曲データを保持する\n    const [trackData, setTrackData] = useState<TrackDataType>();\n    const saveTrackData = (obj: TrackDataType) => {\n        setTrackData(obj);\n    };\n\n    const [transAlert, setTransAlert] = useState<boolean>(true);\n    const passTransAlert = (bool: boolean) => {\n        setTransAlert(bool);\n    };\n\n    return (\n        <Box textAlign=\"left\" py=\"10px\">\n            {/* react-routeの「Prompt」によって、ページを離れようとしたときに警告\n            (投稿確定時のリダイレクトでは無効) */}\n            {transAlert && (\n                <Prompt message=\"ページを離れると入力した内容が失われます\" />\n            )}\n            <CreateBreadcrumb\n                step={step}\n                goTrackInfo={goTrackInfo}\n                goRate={goRate}\n                goCheck={goCheck}\n                isTrackNull={isTrackNull}\n                isRatesNull={isRatesNull}\n            />\n\n            {step === \"track\" ? (\n                <CreateTrackInfo\n                    goRate={goRate}\n                    onChangeTrackURL={onChangeTrackURL}\n                    trackUrl={trackUrl}\n                    trackId={trackId}\n                    setTrackId={changeTrackId}\n                    isTrackNull={isTrackNull}\n                    trackData={trackData}\n                    saveTrackData={saveTrackData}\n                />\n            ) : step === \"rate\" ? (\n                <CreateRate\n                    goCheck={goCheck}\n                    goTrackInfo={goTrackInfo}\n                    onChangeRate={onChangeRate}\n                    rate={rate}\n                    onChangeTitle={onChangeTitle}\n                    title={title}\n                    onChangeBody={onChangeBody}\n                    body={body}\n                    isRatesNull={isRatesNull}\n                />\n            ) : (\n                <CreateCheck\n                    rate={rate}\n                    title={title}\n                    body={body}\n                    trackData={trackData}\n                    trackId={trackId}\n                    goRate={goRate}\n                    setTransAlert={passTransAlert}\n                />\n            )}\n        </Box>\n    );\n});\n","import { memo, VFC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Alert,\n    AlertIcon,\n    AlertTitle,\n    AlertDescription,\n    CloseButton,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n    title: string;\n    body: string;\n};\n\nexport const Alert404: VFC<Props> = memo((props) => {\n    const { title, body } = props;\n    const history = useHistory();\n    const onClickPageBack = () => {\n        history.goBack();\n    };\n\n    return (\n        <Alert\n            status=\"error\"\n            variant=\"subtle\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            textAlign=\"center\"\n            height=\"200px\"\n            pt=\"40px\"\n        >\n            <AlertIcon boxSize=\"40px\" mr={0} />\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n                {title}\n            </AlertTitle>\n            <AlertDescription maxWidth=\"sm\">{body}</AlertDescription>\n        </Alert>\n    );\n});\n","import { Alert404 } from \"../organisms/base/Alert404\";\n\nexport const Page404 = () => {\n    return <Alert404 title=\"エラー\" body=\"データの読み込みに失敗しました。\" />;\n};\n","import { Recent } from \"../components/pages/posts/Recent\";\nimport { FollowPosts } from \"../components/pages/posts/FollowPosts\";\nimport { Popular } from \"../components/pages/posts/Popular\";\nimport { PostDetail } from \"../components/pages/Detail\";\nimport { Create } from \"../components/pages/Create\";\nimport { Page404 } from \"../components/pages/Page404\";\n\nexport const homeRoutes = [\n    {\n        path: \"\",\n        exact: true,\n        children: <Recent />,\n    },\n    {\n        path: \"follow_post\",\n        exact: false,\n        // children: <FollowPosts />,\n        children: <Recent />,\n    },\n    {\n        path: \"popular\",\n        exact: false,\n        // children: <Popular />,\n        children: <Recent />,\n    },\n    {\n        path: \"post/:id\",\n        exact: false,\n        children: <PostDetail />,\n    },\n    {\n        path: \"create_post\",\n        exact: false,\n        children: <Create />,\n    },\n    {\n        path: \"page404\",\n        exact: false,\n        children: <Page404 />,\n    },\n    {\n        path: \"*\",\n        exact: false,\n        children: <Recent />,\n    },\n];\n","import { atom } from \"recoil\";\n\nexport const loginState = atom( {\n    key: \"loginState\",\n    default: { isLogin:true }\n} );\n","import { useCallback } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport apiClient from \"../../client/apiClient\";\nimport { loginState } from \"../../store/loginState\";\nimport { meState } from \"../../store/meState\"\nimport { UserData } from \"../../type/api/UserDataType\"\n\nexport const useGetMe = () =>\n{\n    const setIsLogin = useSetRecoilState( loginState );\n    const setMe = useSetRecoilState( meState );\n\n    // ユーザーの情報を取得できない＝ログインしていないとみなし、\n    // その場合はログイン状態管理（isLogin）がfalseとなる\n    const getMe = useCallback(() => {\n        apiClient\n            .get<UserData>(`/api/user/me`)\n            .then( ( res ) =>\n            {\n                setMe( res.data );\n                setIsLogin( { isLogin:true } );\n            })\n            .catch( () =>\n            {\n                setMe( {id:undefined, name:undefined, email:undefined, job:undefined, image: undefined, body:undefined} );\n                setIsLogin( { isLogin:false } );\n            })\n    }, []);\n\n    return { getMe };\n};\n","import { IconButton } from \"@chakra-ui/react\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { memo, VFC } from \"react\";\n\ntype Props = {\n    display?: {};\n    onClick: () => void;\n    size?: string;\n    ml?: string;\n    my?: string;\n};\n\nexport const HamburgerButton: VFC<Props> = memo((props) => {\n    const { display, onClick, ml = \"none\", my = \"none\", size = \"md\" } = props;\n    return (\n        <IconButton\n            bgGradient=\"linear(to-tl, green, #c4de71)\"\n            color=\"white\"\n            aria-label=\"Open menu\"\n            icon={<HamburgerIcon />}\n            _focus={{ outline: \"none\" }}\n            size={size}\n            ml={ml}\n            my={my}\n            display={display}\n            onClick={onClick}\n        />\n    );\n});\n","import { Text } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nexport const HomePostTitle: VFC<Props> = (props) => {\n  const { children } = props;\n  return (\n    <Text\n      as=\"h1\"\n      color=\"gray.500\"\n      mr=\"auto\"\n      mt=\"8px\"\n      fontSize={{ base: \"18px\", md: \" 23px\" }}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { Flex, Box, IconButton } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\nimport { HiArrowNarrowLeft } from \"react-icons/hi\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { HamburgerButton } from \"../../atoms/button/HamburgerButton\";\nimport { homeState } from \"../../../store/homeState\";\nimport { HomePostTitle } from \"../../atoms/typography/HomePostTitle\";\nimport { useHistory } from \"react-router\";\n\ntype Props = {\n    children: ReactNode;\n    onOpen: () => void;\n};\n\nexport const HomePostBox: VFC<Props> = memo((props) => {\n    const { children, onOpen } = props;\n    const { topic } = useRecoilValue(homeState);\n    const history = useHistory();\n\n    const onBackHome = () => {\n        history.goBack();\n    };\n\n    return (\n        <Flex\n            w={{ base: \"100%\", md: \"80vh\" }}\n            h=\"100vh\"\n            borderX={{ base: \"none\", md: \"1px\" }}\n            borderColor={{ md: \"gray.200\" }}\n            flexDirection=\"column\"\n        >\n            {/* ヘッダー */}\n            <Flex\n                as=\"nav\"\n                w=\"100%\"\n                borderBottom=\"1px\"\n                borderColor=\"gray.200\"\n                // textAlign=\"left\"\n                px=\"3%\"\n            >\n                {/* ページタイトル */}\n                <Box my=\"1.5%\" h=\"5%\">\n                    {topic === \"recent\" ? (\n                        <HomePostTitle>最新の投稿</HomePostTitle>\n                    ) : topic === \"follow\" ? (\n                        <HomePostTitle>フォロー</HomePostTitle>\n                    ) : topic === \"popular\" ? (\n                        <HomePostTitle>人気の投稿</HomePostTitle>\n                    ) : topic === \"create\" ? (\n                        <HomePostTitle>投稿する</HomePostTitle>\n                    ) : (\n                        <Flex>\n                            <IconButton\n                                icon={<HiArrowNarrowLeft />}\n                                aria-label=\"Back home\"\n                                bg=\"none\"\n                                mr={2}\n                                fontSize=\"25px\"\n                                onClick={onBackHome}\n                                mt=\"auto\"\n                                boxSize={{ base: \"29px\", md: \"36px\" }}\n                            />\n                            <HomePostTitle>スレッド</HomePostTitle>\n                        </Flex>\n                    )}\n                </Box>\n                {/* メニューボタン（スマホサイズのときのみ出現） */}\n                <HamburgerButton\n                    display={{ base: \"inline\", md: \"none\" }}\n                    onClick={onOpen}\n                    ml=\"auto\"\n                    my=\"auto\"\n                    size=\"sm\"\n                />\n            </Flex>\n            {/* 投稿一覧部分 */}\n            <Box\n                h=\"100vh\"\n                w=\"100%\"\n                overflow=\"auto\"\n                flexDirection=\"column\"\n                align=\"center\"\n                pt=\"2%\"\n                px={5}\n            >\n                {children}\n            </Box>\n        </Flex>\n    );\n});\n","import { Button } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    w?: string;\n    onClick: () => void;\n    disabled?: boolean;\n};\n\nexport const MenuButton: VFC<Props> = memo((props) => {\n    const { children, w = \"md\", onClick, disabled = false } = props;\n    return (\n        <Button\n            colorScheme=\"gray\"\n            variant=\"ghost\"\n            solid=\"none\"\n            w=\"w\"\n            _hover={{ cursor: \"pointer\" }}\n            _focus={{ boxShadow: \"none\", outline: \"none\" }}\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </Button>\n    );\n});\n","import { Button } from \"@chakra-ui/react\";\nimport { ReactNode, VFC } from \"react\";\n\ntype Props = {\n    children: ReactNode;\n    w?: string;\n    disabled?: boolean;\n    onClick?: () => void;\n    mt?: string;\n};\n\nexport const PrimaryButton: VFC<Props> = (props) => {\n    const { children, w = \"100%\", onClick, disabled, mt = \"none\" } = props;\n    return (\n        <Button\n            onClick={onClick}\n            color=\"white\"\n            bgGradient=\"linear(to-tl, green, #c4de71)\"\n            _focus={{ outline: \"none\" }}\n            _hover={{ opacity: 0.8, cursor: \"pointer\" }}\n            disabled={disabled}\n            w={w}\n            mt={mt}\n        >\n            {children}\n        </Button>\n    );\n};\n","import { memo, useEffect, VFC } from \"react\";\nimport { Box, Button, Flex, Text } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router\";\n\nimport { useLogout } from \"../../hooks/login/useLogout\";\nimport { MenuButton } from \"../atoms/button/MenuButton\";\nimport { PrimaryButton } from \"../atoms/button/PrimaryButton\";\nimport { UserInfoBox } from \"./UserInfoBox\";\nimport { useRecoilValue } from \"recoil\";\nimport { meState } from \"../../store/meState\";\n\ntype Props = {\n    onClose?: () => void | undefined;\n};\n\nexport const MenuContents: VFC<Props> = memo((props) => {\n    const { onClose } = props;\n\n    const history = useHistory();\n    // ユーザーの情報を取得\n    const me = useRecoilValue(meState);\n    const { logout } = useLogout();\n\n    // 画面遷移(＋Drawerが開いてたら閉める)\n    const transTo = (\n        path: \"/\" | \"/follow_post\" | \"/popular\" | \"/create_post\"\n    ) => {\n        history.push(path);\n        onClose !== undefined && onClose();\n    };\n\n    const onRecent = () => {\n        transTo(\"/\");\n    };\n    const onFollowPost = () => {\n        transTo(\"/follow_post\");\n    };\n    const onPopular = () => {\n        transTo(\"/popular\");\n    };\n    const onCreate = () => {\n        transTo(\"/create_post\");\n    };\n\n    const onClickLogout = () => {\n        logout();\n    };\n\n    return (\n        <Flex h=\"100vh\" textAlign=\"right\" flexDirection=\"column\">\n            <Box mr=\"auto\" my=\"20px\">\n                <Text\n                    as=\"h1\"\n                    fontSize=\"40px\"\n                    bgGradient=\"linear(to-tl, green, #c4de71)\"\n                    bgClip=\"text\"\n                    fontWeight=\"bold\"\n                    onClick={onRecent}\n                    cursor=\"pointer\"\n                >\n                    Bebop!\n                </Text>\n            </Box>\n            <Flex flexFlow=\"column\" alignItems=\"start\">\n                <MenuButton onClick={onRecent}>最新の投稿</MenuButton>\n                <MenuButton onClick={onFollowPost} disabled={true}>\n                    フォロー(準備中)\n                </MenuButton>\n                <MenuButton onClick={onPopular} disabled={true}>\n                    人気の投稿(準備中)\n                </MenuButton>\n            </Flex>\n            <Box mt=\"auto\" mx=\"auto\">\n                <PrimaryButton w=\"130px\" onClick={onCreate}>\n                    投稿\n                </PrimaryButton>\n            </Box>\n            <Box mt=\"auto\" mb=\"15%\" textAlign=\"left\">\n                <UserInfoBox\n                    user={{\n                        id: me.id,\n                        name: me.name,\n                        job: me.job,\n                        image: undefined,\n                    }}\n                />\n                <Button\n                    fontSize={{ sm: \"10px\", base: \"5px\" }}\n                    colorScheme=\"red\"\n                    size=\"xs\"\n                    px=\"12px\"\n                    mt=\"5px\"\n                    _focus={{ outline: \"none\" }}\n                    onClick={onClickLogout}\n                >\n                    ログアウト\n                </Button>\n            </Box>\n        </Flex>\n    );\n});\n","import axios from \"axios\";\nimport { useCallback} from \"react\"\nimport { useHistory } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport { loginState } from \"../../store/loginState\";\nimport { meState } from \"../../store/meState\";\nimport { useMessage} from \"../message/useMessage\";\n\n\nexport const useLogout = () => {\n    const { showMessage } = useMessage();\n    const history = useHistory();\n    const setIsLogin = useSetRecoilState( loginState );\n    const setMe = useSetRecoilState( meState );\n\n    const logout = useCallback( ( ) =>\n    {\n        axios.post( \"api/logout\" )\n            .then( res =>\n            {\n                localStorage.removeItem( \"auth\" );\n                setIsLogin( { isLogin: false } );\n                setMe( {id:undefined, name:undefined, email:undefined, job:undefined, image: undefined, body:undefined} );\n                history.push( \"/login\" );\n                showMessage( { title: \"ログアウトしました\", status: \"success\" } );\n            } ).catch( res =>\n            {\n                showMessage( { title: \"ログアウトに失敗しました\", status: \"error\" } );\n            })\n    }, [] );\n    return { logout };\n}\n","import { memo, VFC } from \"react\";\nimport {\n    Drawer,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerBody,\n} from \"@chakra-ui/react\";\n\nimport { MenuContents } from \"../../molecules/MenuContents\";\n\ntype Props = {\n    onClose: () => void;\n    isOpen: boolean;\n};\n\nexport const MenuDrawer: VFC<Props> = memo((props) => {\n    const { onClose, isOpen } = props;\n    return (\n        <Drawer placement=\"left\" size=\"xs\" onClose={onClose} isOpen={isOpen}>\n            <DrawerOverlay>\n                <DrawerContent>\n                    <DrawerBody pl=\"20px\" bg=\"gray.100\">\n                        <MenuContents onClose={onClose} />\n                    </DrawerBody>\n                </DrawerContent>\n            </DrawerOverlay>\n        </Drawer>\n    );\n});\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { memo, ReactNode, VFC } from \"react\";\nimport { MenuContents } from \"../../molecules/MenuContents\";\nimport { MenuDrawer } from \"./MenuDrawer\";\n\ntype Props = {\n    children: ReactNode;\n    isOpen: boolean;\n    onClose: () => void;\n};\n\nexport const MenuBar: VFC<Props> = memo((props) => {\n    const { children, isOpen, onClose } = props;\n\n    return (\n        <Box>\n            {/* メニューバー */}\n            <Flex mx=\"auto\" w=\"100%\" justifyContent=\"center\">\n                <Box h=\"100vh\" pr=\"3%\" display={{ base: \"none\", md: \"inline\" }}>\n                    <MenuContents />\n                </Box>\n                {children}\n            </Flex>\n            <MenuDrawer isOpen={isOpen} onClose={onClose} />\n        </Box>\n    );\n});\n","import { Box, useDisclosure } from \"@chakra-ui/react\";\nimport { memo, ReactNode, useEffect, VFC } from \"react\";\nimport { useGetMe } from \"../../hooks/api/useGetMe\";\n\nimport { HomePostBox } from \"../organisms/base/HomePostBox\";\nimport { MenuBar } from \"../organisms/base/MenuBar\";\n\ntype Props = {\n    children: ReactNode;\n};\n\nexport const BaseLayout: VFC<Props> = memo((props) => {\n    const { children } = props;\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    // ログイン済みの場合、ユーザーの情報を取得してグローバルStateで保持(Cookieでログインしたとき用)\n    const { getMe } = useGetMe();\n    useEffect(() => getMe(), [getMe]);\n\n    return (\n        <Box w=\"100%\">\n            <MenuBar isOpen={isOpen} onClose={onClose}>\n                <HomePostBox onOpen={onOpen}>{children}</HomePostBox>\n            </MenuBar>\n        </Box>\n    );\n});\n","import axios from \"axios\";\nimport { useCallback, useState } from \"react\"\nimport { useHistory } from \"react-router\";\nimport { useSetRecoilState } from \"recoil\";\nimport apiClient from \"../../client/apiClient\";\nimport { loginState } from \"../../store/loginState\";\nimport { useGetMe } from \"../api/useGetMe\";\nimport { useMessage} from \"../message/useMessage\";\n\n\nexport const useLogin = () => {\n    const { showMessage } = useMessage();\n    const history = useHistory();\n\n    const [ user, setUser ] = useState();\n    const setIsLogin = useSetRecoilState( loginState );\n    const { getMe } = useGetMe();\n\n\n    const login = useCallback( (mail: string, password: string ) =>\n    {\n        apiClient.get( 'sanctum/csrf-cookie')\n            .then( res =>\n            {\n                apiClient.post( \"/api/login\", {\n                    email: mail,\n                    password: password\n                })\n                    .then( res =>\n                    {\n                        showMessage( { title: \"ログインしました\", status: \"success\" } );\n                        setIsLogin( { isLogin: true } );\n                        getMe();\n                        history.push( \"/\" );\n                    } ).catch( error =>\n                    {\n                        showMessage( { title: \"ユーザーが見つかりません\", status: \"error\" } );\n                    })\n            })\n    }, [] );\n    return { login };\n}\n","import {\n    Tabs,\n    Text,\n    Box,\n    Flex,\n    Tab,\n    TabList,\n    TabPanels,\n    TabPanel,\n    Button,\n    Image,\n} from \"@chakra-ui/react\";\nimport { ChangeEvent, useState } from \"react\";\n\nimport { useLogin } from \"../../hooks/login/useLogin\";\nimport { Form } from \"../molecules/Form\";\nimport { PrimaryButton } from \"../atoms/button/PrimaryButton\";\nimport { useRegister } from \"../../hooks/login/useRegister\";\nimport { gradationGreen } from \"../atoms/color/gradationGreen\";\n\nexport const Login = () => {\n    // ログインフォーム用state\n    const [loginMailAddress, setLoginMailAddress] = useState(\"\");\n    const [loginPassword, setLoginPassword] = useState(\"\");\n    // 新規登録フォーム用state\n    const [regMailAddress, setRegMailAddress] = useState(\"\");\n    const [regPassword, setRegPassword] = useState(\"\");\n    const [regPasswordConfirm, setRegPasswordConfirm] = useState(\"\");\n    const [regName, setRegName] = useState(\"\");\n\n    // ログインフォーム入力関数\n    const onChangeLoginMailAddress = (e: ChangeEvent<HTMLInputElement>) =>\n        setLoginMailAddress(e.target.value);\n\n    const onChangeLoginPassword = (e: ChangeEvent<HTMLInputElement>) =>\n        setLoginPassword(e.target.value);\n\n    // ログインフォーム入力関数\n    const onChangeRegMailAddress = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegMailAddress(e.target.value);\n\n    const onChangeRegPassword = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegPassword(e.target.value);\n\n    const onChangeRegPasswordConfirm = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegPasswordConfirm(e.target.value);\n\n    const onChangeRegName = (e: ChangeEvent<HTMLInputElement>) =>\n        setRegName(e.target.value);\n\n    const { register } = useRegister();\n    const onClickRegister = () => {\n        register(regName, regMailAddress, regPassword);\n    };\n\n    const { login } = useLogin();\n    const onClickLogin = () => {\n        login(loginMailAddress, loginPassword);\n    };\n\n    return (\n        <Box\n            w=\"100%\"\n            h=\"100vh\"\n            textAlign=\"center\"\n            pt={{ base: \"none\", sm: \"10vh\" }}\n            position=\"relative\"\n        >\n            {/* 画面サイズが大きいときはカードの外に「Bebop！を表示」 */}\n            <Text\n                display={{ base: \"none\", sm: \"inline\" }}\n                as=\"h1\"\n                fontSize=\"60px\"\n                bgGradient={gradationGreen}\n                bgClip=\"text\"\n                fontWeight=\"bold\"\n            >\n                Bebop!\n            </Text>\n            <Flex\n                bg=\"white\"\n                borderRadius={{ base: \"none\", sm: \"10px\" }}\n                p=\"20px\"\n                shadow={{ base: \"none\", sm: \"md\" }}\n                w={{ base: \"100%\", sm: \"400px\" }}\n                h={{ base: \"100%\", sm: \"500px\" }}\n                mx=\"auto\"\n                textAlign=\"center\"\n                flexDirection=\"column\"\n                mt={{ base: \"none\", sm: \"2vh\" }}\n            >\n                <Text\n                    display={{ base: \"inline\", sm: \"none\" }}\n                    as=\"h1\"\n                    fontSize=\"40px\"\n                    bgGradient=\"linear(to-tl, green, #c4de71)\"\n                    bgClip=\"text\"\n                    fontWeight=\"bold\"\n                    mb=\"20px\"\n                >\n                    Bebop!\n                </Text>\n                {/* タブを作成 */}\n                <Tabs isFitted variant=\"enclosed\">\n                    <TabList mb=\"1em\">\n                        <Tab\n                            _selected={{ color: \"white\", bg: \"green.400\" }}\n                            _focus={{ outline: \"none\" }}\n                            fontWeight=\"bold\"\n                        >\n                            ログイン\n                        </Tab>\n                        <Tab\n                            _selected={{ color: \"white\", bg: \"green.400\" }}\n                            _focus={{ outline: \"none\" }}\n                            fontWeight=\"bold\"\n                        >\n                            新規登録\n                        </Tab>\n                    </TabList>\n\n                    {/* タブの中身を記述 */}\n                    <TabPanels>\n                        {/* ログイン用タブパネル */}\n                        <TabPanel>\n                            <Flex flexDirection=\"column\" w=\"100%\" h=\"100%\">\n                                <Form\n                                    onChange={onChangeLoginMailAddress}\n                                    value={loginMailAddress}\n                                    inputType=\"email\"\n                                >\n                                    メールアドレス\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeLoginPassword}\n                                    value={loginPassword}\n                                    inputType=\"password\"\n                                >\n                                    パスワード\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Button\n                                    bgGradient={gradationGreen}\n                                    color=\"white\"\n                                    borderRadius=\"1000px\"\n                                    onClick={onClickLogin}\n                                    disabled={\n                                        loginMailAddress === \"\" ||\n                                        loginPassword === \"\" ||\n                                        loginPassword.length < 6\n                                    }\n                                    w=\"100%\"\n                                    mt=\"15px\"\n                                    mx=\"auto\"\n                                >\n                                    ログイン\n                                </Button>\n                            </Flex>\n                        </TabPanel>\n                        {/* 新規登録用タブパネル */}\n                        <TabPanel>\n                            <Flex flexDirection=\"column\" w=\"100%\" h=\"100%\">\n                                <Form\n                                    onChange={onChangeRegName}\n                                    value={regName}\n                                >\n                                    ユーザー名（10字以内）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegMailAddress}\n                                    value={regMailAddress}\n                                    inputType=\"email\"\n                                >\n                                    メールアドレス\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegPassword}\n                                    value={regPassword}\n                                    inputType=\"password\"\n                                >\n                                    パスワード（6~10字）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Form\n                                    onChange={onChangeRegPasswordConfirm}\n                                    value={regPasswordConfirm}\n                                    inputType=\"password\"\n                                >\n                                    パスワード（再入力）\n                                </Form>\n                                <Box h=\"10px\" />\n                                <Button\n                                    bgGradient={gradationGreen}\n                                    color=\"white\"\n                                    borderRadius=\"1000px\"\n                                    w=\"100%\"\n                                    mt=\"15px\"\n                                    mx=\"auto\"\n                                    onClick={onClickRegister}\n                                    disabled={\n                                        regMailAddress === \"\" ||\n                                        regPassword === \"\" ||\n                                        regPasswordConfirm === \"\" ||\n                                        regPassword !== regPasswordConfirm ||\n                                        regName === \"\"\n                                    }\n                                >\n                                    新規登録\n                                </Button>\n                            </Flex>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </Flex>\n        </Box>\n    );\n};\n","import axios from \"axios\";\nimport { useCallback } from \"react\"\nimport { useMessage} from \"../message/useMessage\";\nimport { useLogin } from \"./useLogin\";\n\n\nexport const useRegister = () => {\n    const { showMessage } = useMessage();\n    const { login } = useLogin();\n\n\n\n    const register = useCallback( (name:string, mail: string, password: string ) =>\n    {\n        const data = {\n            name: name,\n            email: mail,\n            password: password\n        }\n\n        axios.post( \"api/register\", data )\n            .then( ( res ) =>\n            {\n                if ( res.status == 200 )\n                {\n                    login(mail,password)\n                }\n            } )\n            .catch(  () =>\n            {\n                showMessage( { title: \"新規登録に失敗しました\", status: \"error\" } );\n            })\n    }, [] );\n    return {  register };\n}\n","import { memo, ReactNode, VFC } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useRecoilValue } from \"recoil\";\nimport { loginState } from \"../../store/loginState\";\n\ntype Props = {\n    children: ReactNode;\n};\n\nexport const AuthGuard: VFC<Props> = memo((props) => {\n    const { children } = props;\n    const { isLogin } = useRecoilValue(loginState);\n\n    return isLogin ? <>{children}</> : <Redirect to=\"/login\" />;\n});\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { homeRoutes } from \"./HomeRoutes\";\nimport { BaseLayout } from \"../components/templates/BaseLayout\";\nimport { Page404 } from \"../components/pages/Page404\";\nimport { Login } from \"../components/pages/Login\";\nimport { loginState } from \"../store/loginState\";\nimport { AuthGuard } from \"./auth_route/AuthGuard\";\n\nexport const Router = () => {\n    const { isLogin } = useRecoilValue(loginState);\n    return (\n        <Switch>\n            <Route exact path=\"/login\">\n                {/* ログイン済の場合はトップページにリダイレクトされる */}\n                {isLogin ? <Redirect to=\"/\" /> : <Login />}\n            </Route>\n            {/* 未ログインの場合は「AuthGuard」によってログイン画面へリダイレクトされる */}\n            <AuthGuard>\n                <BaseLayout>\n                    <Switch>\n                        <Route\n                            path=\"/\"\n                            render={({ match: { url } }) => (\n                                <Switch>\n                                    {homeRoutes.map((route) => (\n                                        <Route\n                                            key={route.path}\n                                            exact={route.exact}\n                                            path={`${url}${route.path}`}\n                                        >\n                                            {route.children}\n                                        </Route>\n                                    ))}\n                                </Switch>\n                            )}\n                        />\n                    </Switch>\n                </BaseLayout>\n            </AuthGuard>\n            <Route path=\"*\">\n                <Page404 />\n            </Route>\n        </Switch>\n    );\n};\n","import \"./App.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport theme from \"./theme/theme\";\nimport { Router } from \"./router/Router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      <BrowserRouter>\n        <RecoilRoot>\n          <ChakraProvider theme={theme}>\n            <Router />\n          </ChakraProvider>\n        </RecoilRoot>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}